{
  "paths": {
    "/accounts/2/id": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get current Account details",
        "responses": {
          "200": {
            "description": "account  returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseAccount"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/2/{account_id}/": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get Account details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "description": "Update Account details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "400": {
            "description": "invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/domain": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Associates new Email domain to the account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "domain id (exp kissflow.com)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "name of the domain (exp Kissflow)"
                  },
                  "VerificationEmail": {
                    "type": "string",
                    "description": "Verification email for the domain (exp admin@kissflow.com)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/domain/{domain_id}": {
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Dissociate email domain from the account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain_id",
            "in": "path",
            "description": "ID of domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dissociate email domain from the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/flow/setting": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Update Flow Control setting",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlowControlSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Flow Control setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get Flow Control setting",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Flow Control setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowControlSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/owner": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "description": "Transfer ownership",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer ownership",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/lowcode/setting": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Update the low code config from account for lowcode",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LowcodeConfigSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Flow Control setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/auth/setting": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Update security setting",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityRequestParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update security setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Update security setting",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update security setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRequestParams"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/chat/setting": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Update the Chat Preference",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatPreferenceRequestParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update security setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get Chat Preference",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update security setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatPreferenceRequestParams"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/billing/customer/details": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get Account details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDetailsSchema"
                }
              }
            }
          },
          "403": {
            "description": "permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/2/{account_id}/billing/invoice/{invoice_id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get Account details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "ID of invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice Download URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectUrlSchema"
                }
              }
            }
          },
          "403": {
            "description": "permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/2/{account_id}/billing/address": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "description": "Get Account details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/accounts/2/{account_id}/sandbox/domain": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "description": "Update the sandbox subdomain",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSandboxSubDomain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Api Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/sandbox/": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Create sandbox",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New Sandbox",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetail"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/auth/setting/saml": {
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "remove the saml configuration",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated the saml configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/logo": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Set Account logo",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultUploadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Set account logo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/setting/UserAndGroup/impersonation": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Update Platform Security setting",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpersonatorSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update impersonator setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImpersonatorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/setting/FlowDetail/impersonation": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Update Platform Security setting",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpersonatorSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update impersonator setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImpersonatorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/accounts/2/{account_id}/setting/GlobalItem/impersonation": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Update Platform Security setting",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpersonatorSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update impersonator setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImpersonatorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/admin/2/{account_id}/holidays/": {
      "post": {
        "deprecated": true,
        "tags": [
          "Admin"
        ],
        "description": "Update Account holidays",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHolidaysParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "holidays details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "deprecated": true,
        "tags": [
          "Admin"
        ],
        "description": "get Account holidays",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Start",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Start date string as ISO DATE FORMAT ` %Y-%m-%d `"
          },
          {
            "name": "End",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "End date string as ISO DATE FORMAT ` %Y-%m-%d `"
          },
          {
            "name": "WeekEnds",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of holidays",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HolidaysParams"
                  }
                }
              }
            }
          },
          "400": {
            "description": "invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/admin/2/{account_id}/invoice/": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "get Account Invoice",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of holidays",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/analytics-sync/kfv2/{account_id}/{flow_type}/{model_id}/sync/data": {},
    "/analytics-sync/kfv2/{account_id}/{flow_type}/{model_id}/sync/tables": {},
    "/auditlog/2/{account_id}/account/count": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Item Audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventCount"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/account/list": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get All Account level Audit Events",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number requested from UI",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events for Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccountLevelAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/account/{audit_id}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Account Audit Document",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audit_id",
            "in": "path",
            "description": "Audit Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAuditEvent"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/account/{field_id}/values": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get values for account level audit field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Field value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventFieldValues"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/account/export": {
      "post": {
        "tags": [
          "Audit"
        ],
        "description": "post audit data export request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Export request received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/flow/{flow_type}/{flow_id}/count": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Flow Audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventCount"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/flow/{flow_type}/{flow_id}/list": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get All Audit Events triggered for the Flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number requested from UI",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events for Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFlowLevelAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/flow/{flow_type}/{flow_id}/{audit_id}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Flow Audit Document",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audit_id",
            "in": "path",
            "description": "Audit ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAuditEvent"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/flow/{flow_type}/{flow_id}/{field_id}/values": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get values for flow level audit field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Field value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventFieldValues"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/flow/{flow_type}/{flow_id}/export": {
      "post": {
        "tags": [
          "Audit"
        ],
        "description": "post audit data export request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Export request received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/item/{flow_type}/{flow_id}/count": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Item Audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventCount"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/item/{flow_type}/{flow_id}/list": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get All Audit Events triggered for the Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number requested from UI",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events for Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemLevelAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/item/{flow_type}/{flow_id}/{audit_id}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Item Audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audit_id",
            "in": "path",
            "description": "Audit ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAuditEvent"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/item/{flow_type}/{flow_id}/{field_id}/values": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get values for item level audit field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Field value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventFieldValues"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/item/{flow_type}/{flow_id}/export": {
      "post": {
        "tags": [
          "Audit"
        ],
        "description": "post audit data export request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Export request received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/user/count": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Item Audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventCount"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/user/list": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get All user admin level Audit Events",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number requested from UI",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events for Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccountLevelAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/user/{audit_id}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Account Audit Document",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audit_id",
            "in": "path",
            "description": "Audit Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAuditEvent"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/user/{field_id}/values": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get values for user admin level audit field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Field value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventFieldValues"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/auditlog/2/{account_id}/user/export": {
      "post": {
        "tags": [
          "Audit"
        ],
        "description": "post audit data export request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Export request received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/audit/2/{account_id}/user/{user_id}/activity": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get All Data Events Triggered by Logged In User",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number requested from UI",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events for Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultAuditStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/audit/2/{account_id}/admin/activity": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get All Data Events Triggered in account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number requested from UI",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events for Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccountAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultAuditStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/audit/2/{account_id}/{flow_type}/{flow_id}/activity": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get All Data Events Triggered in Flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number requested from UI",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events for Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFlowAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultAuditStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/audit/2/{account_id}/{audit_id}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Describe specific event for account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audit_id",
            "in": "path",
            "description": "Unique Audit Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Describe Specific Audit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAudit"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultAuditStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/audit/2/{account_id}/user/{user_id}/count": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Logged In User audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditCount"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultAuditStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/audit/2/{account_id}/{flow_type}/{flow_id}/count": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get flows audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type",
            "in": "path",
            "description": "Flow Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditCount"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultAuditStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/audit/2/{account_id}/admin/count": {
      "get": {
        "tags": [
          "Audit"
        ],
        "description": "Get Account audit count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique Account Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit Events Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditCount"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultAuditStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/{report_id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "View report data",
        "description": "This endpoint lets you view the data of a specific report in a specific case system.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched report data successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid report or case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/{report_id}/count": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "Count of report results",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique ID generated of the case",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search query string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/{report_id}/fields": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "Get report Fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique ID generated of the case",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of fields selected for tabular Report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TabularReportFields"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/{report_id}/aggregation": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "Returns summary of whole report, all entries",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique ID generated of the case",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary result for each report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Returned when called for reports other than tabular report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/tq": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "Get Report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSuccessResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/{report_id}/export": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint exports a specific report for a specific case system.",
        "summary": "Export report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Supported export file type CSV/JSON",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported report based on given type successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid report or case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/{report_id}/{instance_id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "Get Item",
        "parameters": [
          {
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "case_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "report_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "instance_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/metric/{metric_id}": {
      "get": {
        "tags": [
          "CaseReport"
        ],
        "description": "This endpoint returns the metric data based on the metric subtype.",
        "summary": "Get case metric report data",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your Kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique ID of the case",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metric_id",
            "in": "path",
            "description": "Unique metric report ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the metric data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid metric Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case-report/2/{account_id}/{case_id}/metric/{metric_id}/export": {
      "get": {
        "tags": [
          "CaseReport"
        ],
        "description": "This endpoint exports a specific report for a specific case system",
        "summary": "Export report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your Kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique ID of the case",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metric_id",
            "in": "path",
            "description": "Unique metric ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Supported export file type CSV",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid metric Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you create a new item in the case system.",
        "summary": "Create a new item in the case system",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to create a new item",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request creates a new item in your case system.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value specified for Status, AssignedTo, Priority, Requester, Duedate or one of the custom fields is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specific case system could not be found in the server. Check if the account_id or case system ID entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified for one of the custom fields is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/clone": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you clone an item in your case system. No input is required for this endpoint.",
        "summary": "Clone an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Case ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item that has to be cloned",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": null,
          "required": false,
          "content": {
            "application/json": {
              "properties": null
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item cloned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve all the details of an item.",
        "summary": "Retrieve all item details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Your unique <<glossary:Item ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the details of a specific item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItem"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you delete an item from the case system.",
        "summary": "Delete an Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a specific item",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{status_id}": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you update the custom form fields in a case system.",
        "summary": "Update custom form fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_id",
            "in": "path",
            "description": "ID of the current status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update custom form fields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDictOfInstance"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the status of custom form fields in a case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified for one of the custom form fields is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/update": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you update the field values of a specific item in a case system.",
        "summary": "Update the field values of a specific item in a case system",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Case ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item that has to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update the custom fields and system fields of the selected item in the case system.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDictOfInstanceIntegration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceIntegrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified for one of the custom form fields is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{status_id}/move": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you change the status of an item in the case system.",
        "summary": "Update the status of an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_id",
            "in": "path",
            "description": "ID of the current status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update the status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveItemInstanceDict"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request changes the status of an item in the case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{status_id}/reassign": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you change the assignee of an item in the case system.",
        "summary": "Update the assignee for an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_id",
            "in": "path",
            "description": "ID of the current status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update the assignee",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignItemInstanceDict"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request changes the assignee of an item in the case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid. The value specified for Assignee is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{status_id}/DueDate": {
      "put": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you update the due date (date and time) for an item in the case system.",
        "summary": "Update the due date and time for an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_id",
            "in": "path",
            "description": "ID of the current status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update due date (date and time)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DueDateUpdateDict"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the due date (date and time) of an item in the case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{status_id}/_priority_id": {
      "put": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you update the priority for an item in the case system.",
        "summary": "Update the priority for an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_id",
            "in": "path",
            "description": "ID of the current status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update the priority",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriorityUpdateDict"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the priority of an item in the case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{status_id}/Requester": {
      "put": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you update the requester for an item in the case system.",
        "summary": "Update the requester for an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_id",
            "in": "path",
            "description": "ID of the current status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update the requester",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequesterUpdateDict"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the requester of an item in the case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/add/watchers": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you add watcher(s) to a case.",
        "summary": "Add watcher(s) to a case",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "System generated ID of this case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to add watcher(s) to a case.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watcher(s) added successfully to your case.",
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "success"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload to add watchers to a case are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the required permissions to add watchers to this case.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified case could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "406": {
            "description": "The maximum number of watchers that can be assigned to your case has been reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/watchers": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve the list of watchers for a case in your case system.",
        "summary": "Get list of watchers for a case",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "System generated ID of this case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of watchers for your case was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchersRequest"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload to retrieve watchers of a case are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the required permissions to retrieve watchers of this case.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified case could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/remove/watchers": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you remove watcher(s) from a case.",
        "summary": "Remove watcher(s) from a case",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "System generated ID of this case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to remove watcher(s) from a case.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The watcher(s) were successfully removed from your case.",
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "success"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload to remove watchers from a case are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the required permissions to remove watchers from this case.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified case could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/view/{view_id}/export/initiate": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you export items in a case system for a specific view. The exported CSV file will be sent to your registered email address.",
        "summary": "Export items in a case system for a specific view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Case ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of the view that contains all the filter conditions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported CSV file sent to registered email address successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Status": {
                      "type": "string",
                      "example": "Exported CSV file sent to registered email address successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/transition": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve the status transitions of an item in a case system.",
        "summary": "Retrieve status transitions of an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of an item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request lists the status transitions of an item in a case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransitionResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/activity": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get the activities of a item",
        "description": "This endpoint lets you retrieve activities of a specific item in your case.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Your Kissflow Case's unique <<glossary:Item ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves activities of a specific item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieve the activity of a specific item failed to execute. Check if the item_id, case_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{view_type}/items": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve the list of items in a view based on a filter.",
        "summary": "Retrieve the list of items in a view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of the view that contains all the filter conditions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to display specific columns and apply selected filter conditions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request retrieves the list of item in a view after a filter is applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The specified view is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified filter could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/count": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets your retrieve the number of items in a view based on a filter.",
        "summary": "Retrieve the number of items in a view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of the view that contains all the filter conditions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to display specific columns and apply selected filter conditions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get count of items in a view after a filter is applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            }
          },
          "400": {
            "description": "The specified view is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified filter could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/batch/reassign": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-update assignee for items.",
        "summary": "Bulk-update assignee for items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-update assignee for items",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAssign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-update of assignee for items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "The value for AssignedTo is missing in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specific item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/batch/move": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-update status for items.",
        "summary": "Bulk-update status for items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-update status for items",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-update of status for items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "The value for_status_id is missing in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/batch/_priority_id": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-update priority for items.",
        "summary": "Bulk-update priority for items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-update priority",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUpdatePriority"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-update of priority for items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "The value for_priority_id is missing in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specific item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/batch/delete": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-delete items from the case system.",
        "summary": "Bulk-delete items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-delete items",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipleItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-deletion of items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you add an attachment to an attachment field in the case form. The following file formats are supported - pdf, .doc, .ppt, .xls, .jpg, .jpeg, .jpe, .png, .gif, or .mp4.",
        "summary": "Upload an attachment to an attachment field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request adds a new attachment to an attachment field in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{table_id}/{row_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you upload an attachment to an attachment field in a table in the case form. The following file formats are supported - pdf, .doc, .ppt, .xls, .jpg, .jpeg, .jpe, .png, .gif, or .mp4.",
        "summary": "Upload an attachment to an attachment field in a table table field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request uploads an attachment to an attachent field in a table in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you upload an image file to an image field in the case form. The following file formats are supported - .jpg, .jpeg, .jpe, .png, or .gif.",
        "summary": "Upload an image file to an image field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request uploads an image file to an image field in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you download an image file from an image field in the case form.",
        "summary": "Download an image file from an image field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request downloads an image file from an image field in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{table_id}/{row_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you upload an image file to an image field in a table in the case form. The following image file formats are supported - .jpg, .jpeg, .jpe, .png, or .gif.",
        "summary": "Upload an image to an image field in a table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image to a table in your case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you download an image file from an image field in the case form.",
        "summary": "Download an image from an image file in a table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request downloads an image file from an image field in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you download an attachment from an attachment field in the case form.",
        "summary": "Download an attachment from an attachment field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request downloads an attachment from an attachment field in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{table_id}/{row_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you download an attachment from an attachment field in the case form.",
        "summary": "Download an attachment from an attachment field in a table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "The <<glossary:Case ID>> is a unique identifier for each case system, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your case form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request downloads an attachment from an attachment field in a table in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/subitem": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you create a new Subitem in the case system.",
        "summary": "Create a new Subitem in the case system",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Item ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to create a new subitem",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubitem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request creates a new subitem in your case system.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value specified for Status, AssignedTo, Duedate or one of the custom fields is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specific case system or item could not be found in the server.Check if the account_id or case system ID entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified for one of the custom fields is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve the list of subitems for a given item.",
        "summary": "Retrieve the list of subitems for a given item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Case ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": null,
          "required": false,
          "content": {
            "application/json": {
              "properties": null
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request retrieves the list of Subitems for a given item.",
            "summary": "Retrieves the list of Subitems.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubitemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The specified item is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/subitem/{subitem_id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve all the details of a subitem.",
        "summary": "Retrieve subitem details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Item ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subitem_id",
            "in": "path",
            "description": "Your unique <<glossary:Subitem ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the details of a specific Subitem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubitem"
                }
              }
            }
          },
          "404": {
            "description": "The specified Subitem could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you update the subitem of the given item.",
        "summary": "Update subitem of the given item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your unique <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your unique <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Your unique <<glossary:Item ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subitem_id",
            "in": "path",
            "description": "Your unique <<glossary:Subitem ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update the subitem of the given item",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDictOfInstance"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the subitem of a given item in a case system.",
            "summary": "Update a Subitem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "The parameters specified in the payload are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified Subitem could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "The value specified for one of the update fields is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you delete a subitem of an item from the case system.",
        "summary": "Delete a subitem",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subitem_id",
            "in": "path",
            "description": "ID of the subitem to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a specific Subitem",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified Subitem could not be found or has moved to a different status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/subitem/{subitem_id}/clone": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you clone a subitem in your case system. No input is required for this endpoint.",
        "summary": "Clone a subitem",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Case ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subitem_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Subitem ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": null,
          "required": false,
          "content": {
            "application/json": {
              "properties": null
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subitem cloned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subitem not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/fields": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve all the fields in a case system.",
        "summary": "Retrieve all fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all the fields in a case system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/lookup/fields": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint retrieves all fields from another flow using a lookup field.",
        "summary": "Retrieve all fields using a lookup field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of the case system whose fields are required",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request lists all the fields from another flow using a lookup field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/table/{table_id}/fields": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve all the fields from a table in another flow while using a lookup field.",
        "summary": "Retrieve all fields from a table using a lookup field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "ID of the child table whose fields are required",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request lists all the fields from a table in another flow using a lookup field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint retrieves a list of items in another flow and populate it in a lookup field added in the case form.",
        "summary": "Retrieve a list of items and populate them in a lookup field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item that is looking up data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of the lookup field that will populate data from another flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves a list of items in another flow and populates it in a lookup field added in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{table_id}/{table_instance_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint retrieves a list of items from another flow and populates it in a lookup field added in a table in the case form.",
        "summary": "Retrieve a list of items and populate them in a lookup field in a table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item that is looking up data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "ID of the table that contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_instance_id",
            "in": "path",
            "description": "ID of the row in a table that contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of the lookup field that will populate data from another flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves a list of items from another flow and populates it in a lookup field added in a table in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{field_id}/rlookup": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve a list of items external source and populates it in a remote lookup field added in the case form.",
        "summary": "Retrieve a list of items and populate them in a remote lookup field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item that is looking up data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of the remote lookup field that will populate data from an external source",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves a list of items from an external source and populates it in a remote lookup field added in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/{item_id}/{table_id}/{table_instance_id}/{field_id}/rlookup": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint retrieves a list of items from an external source and populates it in a remote lookup field added in a table in the case form.",
        "summary": "Retrieve a list of items and populate them in a remote lookup field in a table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "ID of the item that is looking up data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "ID of the table that contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_instance_id",
            "in": "path",
            "description": "ID of the row in a table that contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of the remote lookup field that will populate data from another flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves a list of items from an external source and populates it in a remote lookup field added in a table in the case form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/metric/items/move/batch": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-update status for items.",
        "summary": "Bulk-update status for items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-update status for items",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-update of status for items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "The value for_status_id is missing in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/metric/items/reassign/batch": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-update assignee for items.",
        "summary": "Bulk-update assignee for items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-update assignee for items",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAssign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-update of assignee for items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "The value for AssignedTo is missing in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specific item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/metric/items/_priority_id/batch": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-update priority for items.",
        "summary": "Bulk-update priority for items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-update priority",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUpdatePriority"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-update of priority for items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "The value for_priority_id is missing in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specific item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/metric/items/delete/batch": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you bulk-delete items from the case system.",
        "summary": "Bulk-delete items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to bulk-delete items",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipleItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perform bulk-deletion of items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified item(s) could not be found in the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/metric/items": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve the list of items in a metric right sheet based on a filter.",
        "summary": "Retrieve the list of items in metric right sheet view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of the view that contains all the filter conditions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to display specific columns and apply selected filter conditions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request retrieves the list of item in a view after a filter is applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The specified view is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified filter could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/metric/items/count": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint lets you retrieve count of items in a metric right sheet based on a filter.",
        "summary": "Retrieve the count of items in metric right sheet view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "ID of a case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of the view that contains all the filter conditions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to display specific columns and apply selected filter conditions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request retrieves the list of item in a view after a filter is applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "The specified view is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The specified filter could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/case/2/{account_id}/{case_id}/metric/items/move/batch/initiate": {},
    "/case/2/{account_id}/{case_id}/metric/items/reassign/batch/initiate": {},
    "/case/2/{account_id}/{case_id}/metric/items/_priority_id/batch/initiate": {},
    "/case/2/{account_id}/{case_id}/metric/items/delete/batch/initiate": {},
    "/channel/2/{account_id}/": {
      "post": {
        "tags": [
          "Channel"
        ],
        "description": "To create a channel in kissflow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to create a channel",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelCreationRequestParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Channel creation Results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCreationResponse"
                }
              }
            }
          },
          "403": {
            "description": "Channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}": {
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "To update a channel in kissflow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to update a channel",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelUpdationRequestParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update channel results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channel"
        ],
        "description": "To delete a channel in kissflow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete channel results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Channel"
        ],
        "description": "Get channel details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get channel results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChannelInfo"
                }
              }
            }
          },
          "403": {
            "description": "Channel Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/archive": {
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "To archive a channel in kissflow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archive channel results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/unarchive": {
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "To unarchive a channel in kissflow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unarchive channel results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/subscribe": {
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "To subscribe a channel in kissflow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscribe channel results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/unsubscribe": {
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "To unsubscribe a channel in kissflow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UnSubscribe channel results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Data Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/post": {
      "post": {
        "tags": [
          "Channel"
        ],
        "description": "This API creates a post, announcement, poll in a channel.",
        "summary": "Create a new post",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Post Creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetail"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/post/{post_id}": {
      "get": {
        "tags": [
          "Channel"
        ],
        "description": "This endpoint lets you retrieve the post details of a specific post in a channel.",
        "summary": "Get channel post details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "description": "This is the unique <<glossary:Post ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves details of a specific post in a channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetail"
                }
              }
            }
          },
          "403": {
            "description": "The request to retrieve post details could not be processed as you don't have permission to perform this action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "This API updates the details of a post for a provided post_id",
        "summary": "Update channel post details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "description": "post Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Post Content",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetail"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channel"
        ],
        "description": "This endpoint lets you delete a specific post inside a Kissflow channel.",
        "summary": "Delete channel post",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "description": "This is the unique <<glossary:Post ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully deletes a post, announcement, or poll in your channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "The request to delete a channel post could not be processed as you don't have permission to perform this action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/post/{post_id}/poll/{poll_id}/option/{option_id}/{vote_type}": {
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "This API updates the voting details for a given post's poll_id.",
        "summary": "Update poll votes",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "poll_id",
            "in": "path",
            "description": "Poll Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Poll Option Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vote_type",
            "in": "path",
            "description": "vote or unvote or update the vote",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "vote",
                "unvote"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "List of Users",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PollVote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollPostDetail"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/post/{post_id}/poll/{poll_id}/option/": {
      "post": {
        "tags": [
          "Channel"
        ],
        "description": "This API Creates a poll option for the given post's poll_id",
        "summary": "Create new poll option",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "poll_id",
            "in": "path",
            "description": "Poll Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Poll Options",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PollOptionAddition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetail"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/channel/2/{account_id}/{channel_id}/post/{post_id}/poll/{poll_id}/option/{option_id}": {
      "put": {
        "tags": [
          "Channel"
        ],
        "description": "This API Updates a poll option for the given post's poll_id",
        "summary": "Update poll option",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "poll_id",
            "in": "path",
            "description": "Poll Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Poll Option Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Poll Options",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePollOption"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollPostDetail"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channel"
        ],
        "description": "This API deletes a poll option for the given post's poll_id",
        "summary": "Remove poll option",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Channel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "poll_id",
            "in": "path",
            "description": "Poll Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Poll Option Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollPostDetail"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/mytasks/items": {
      "get": {
        "tags": [
          "Common"
        ],
        "description": "Get Pending Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Pending Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalItemListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/mytasks/count": {
      "get": {
        "tags": [
          "Common"
        ],
        "description": "Get Pending Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Pending Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/workflow/mytasks/items/count": {
      "get": {
        "tags": [
          "Global"
        ],
        "summary": "Get count of all pending workflow tasks",
        "description": "This endpoint gets the total number of tasks across workflows awaiting your action",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched the total no. of pending workflow tasks successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/workflow/mytasks/items": {
      "get": {
        "tags": [
          "Global"
        ],
        "summary": "Get a list of all pending workflow tasks",
        "description": "This endpoint gets the list of all the tasks across workflows awaiting your action",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched the list of all pending workflow tasks successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalItemListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/workflow/myitems/{status}/count": {
      "get": {
        "tags": [
          "Global"
        ],
        "summary": "Get count of all your items across workflows",
        "description": "This endpoint gets the total number of all the items where you are the initiator or requester across workflows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the items for which you would like to get the count. Param values, \"NotStarted\", \"Completed\", \"InProgress\". This value is case sensitive.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched your item count successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/workflow/myitems/{status}/items": {
      "get": {
        "tags": [
          "Global"
        ],
        "summary": "Get list of all your items across workflows",
        "description": "This endpoint gets the list of all the items where you are the initiator or requester across workflows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the items that you would like to fetch as a list. Param values&#58; \"NotStarted\", \"Completed\", \"InProgress\". \"This value is case sensitive\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched your item list successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalItemListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/mytasks/items/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Pending Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Pending Items Count",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/search/count": {},
    "/common/2/{account_id}/search/items": {},
    "/common/2/{account_id}/todo/approval/flow/{task_id}/approve": {
      "post": {
        "tags": [
          "Common"
        ],
        "description": "Flow approvers can access this api",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow approvers can access this api"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/todo/approval/flow/": {
      "post": {
        "tags": [
          "Common"
        ],
        "description": "Flow approvers can access this api",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow approvers can access this api"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/todo/approval/flow/{task_id}/deny": {
      "post": {
        "tags": [
          "Common"
        ],
        "description": "Flow approvers can access this api",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow approvers can access this api"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/todo/task/": {
      "post": {
        "tags": [
          "Common"
        ],
        "description": "Flow approvers can access this api",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow approvers can access this api"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/todo/requested_access/": {
      "post": {
        "tags": [
          "Common"
        ],
        "description": "user admin only can get this",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user admin only can get this"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/common/2/{account_id}/todo/orphan_flow/": {
      "post": {
        "tags": [
          "Common"
        ],
        "description": "super admin only can get orphan flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "super admin only can get orphan flows"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/fields": {
      "get": {
        "tags": [
          "DatasetView"
        ],
        "description": "Get the list of fields for a specific dataset or view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Field in Dataset or View",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/{instance_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "DatasetView"
        ],
        "description": "Lookup Data for a reference field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset or view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance ID for the specific dataset or view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/lookup": {
      "post": {
        "tags": [
          "DatasetView"
        ],
        "description": "Lookup data from other services",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Lookup aggregation intermediate datastruct",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryDefinitionIntermediateDataStructure"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lookup data from other services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "description": "Get an existing dataset record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifier for each dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Key column value of the dataset. It is a unique string that identifies the record you are trying to fetch from the dataset. It is a mandatory parameter<br />",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Instance by the instance name(key field)"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Dataset"
        ],
        "description": "Delete a specific dataset record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifier for each dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to delete a specific dataset record <br /> Name - `Key` column value of the dataset. It is a unique string that identifies the record you are trying to delete in the dataset. It is a mandatory parameter<br />",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  }
                },
                "example": {
                  "Name": 10
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deleted the dataset record successfully"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Dataset"
        ],
        "description": "Update an existing dataset record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifier for each dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to update a dataset record <br /> Name - `Key` column value of the dataset. It is a unique string that identifies the record you are trying to update in the dataset. It is a mandatory parameter<br /> Field1 - Value to be updated in the `Field1` column in the dataset",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Field1": {
                    "type": "string"
                  }
                },
                "example": {
                  "Name": 10,
                  "Field1": "Blackwidow"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated the dataset record successfully"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Dataset"
        ],
        "description": "Create a new dataset record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifier for each dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to create a new dataset record <br /> Name - `Key` column value of the dataset. It is a unique string that identifies the record you are trying to create in the dataset. It is a mandatory parameter<br /> Field1 - Value to be added in the `Field1` column in the dataset",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Field1": {
                    "type": "string"
                  }
                },
                "example": {
                  "Name": 10,
                  "Field1": "Blackwidow"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Added the dataset record successfully"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/list": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "description": "This endpoint lets you retrieve a specific dataset's records, including dataset fields and respective values.",
        "summary": "Get dataset records",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "This is the search filter string, and is an optional parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list and is an optional parameter. The page number can be specified as 1, 2, 3, etc. Default value is 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page result and is an optional parameter. Default value is 10.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves your dataset's fields and values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}": {
      "put": {
        "tags": [
          "DatasetView"
        ],
        "description": "Create New view collection with dataset order and definition",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for successful creation of view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewCreateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/list": {
      "get": {
        "tags": [
          "DatasetView"
        ],
        "description": "Get View grid data",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "View grid fields and Data list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/batch": {
      "post": {
        "tags": [
          "DatasetView"
        ],
        "description": "Batch Update of Dataset Records",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Post body with data to update on view",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "dataset view rows updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateDictOfAInstance"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/{row_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "description": "This endpoint lets you upload file to an attachment field in row.",
        "summary": "Add attachment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new attachment to your dataset field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/{row_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "description": "This endpoint lets you upload image to field in row.",
        "summary": "Add image file",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image file to your dataset field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Dataset"
        ],
        "description": "This endpoint lets you download an image from a dataset field.",
        "summary": "Download image from dataset",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from your dataset field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download an image from a dataset field could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/{row_id}/{field_id}/image": {
      "post": {
        "tags": [
          "DatasetView"
        ],
        "description": "This endpoint lets you upload image to field in row.",
        "summary": "Add image file",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:DatasetView ID>> is a unique identifyer for each view in dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image file to your dataset field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "DatasetView"
        ],
        "description": "This endpoint lets you download an image from a field in your dataset view.",
        "summary": "Download image from dataset view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:DatasetView ID>> is a unique identifyer for each view in dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from a field in your dataset view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download an image from a field in your dataset view could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/{row_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "DatasetView"
        ],
        "description": "This endpoint lets you upload file to an attachment field in row.",
        "summary": "Add attachment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:DatasetView ID>> is a unique identifyer for each view in dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new attachment to your dataset field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/{row_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "description": "This endpoint lets you download a specific attachment file from a field in a row of your dataset.",
        "summary": "Download attachment from dataset",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment from your dataset field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download a specific attachment from a dataset field could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/{row_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "DatasetView"
        ],
        "description": "This endpoint lets you download a specific attachment file from a field in your dataset view.",
        "summary": "Download attachment from dataset view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:DatasetView ID>> is a unique identifyer for each view in dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment file from a field in your dataset view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download a specific attachment from a field in your dataset view could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/p{page}/{per_page}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Dataset"
        ],
        "description": "This endpoint lets you retrieve a specific dataset's records, including dataset fields and respective values.",
        "summary": "Get dataset records",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "path",
            "description": "The number of items that can be listed in a page. It can be 10, 25, 50, 100, etc. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "This is the search filter string, and is an optional parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves your dataset's fields and values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/p{page}/{per_page}": {
      "get": {
        "deprecated": true,
        "tags": [
          "DatasetView"
        ],
        "description": "Get View grid data",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "current_page",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "path",
            "description": "row per page",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "View grid fields and Data list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/view/{view_id}/configure/fields": {
      "get": {
        "tags": [
          "DatasetView"
        ],
        "description": "Get the list of fields for a specific dataset or view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "ID of dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of dataset view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Field in Dataset or View",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/dataset/2/{account_id}/{dataset_id}/aggregation": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "description": "This endpoint lets you retrieve dataset's fields aggregation details.",
        "summary": "Get dataset's fields aggregation details.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "The <<glossary:Dataset ID>> is a unique identifyer for each dataset, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "This is the search filter string, and is an optional parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list and is an optional parameter. The page number can be specified as 1, 2, 3, etc. Default value is 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page result and is an optional parameter. Default value is 10.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "field_ids",
            "in": "query",
            "description": "List of field IDs under the current dataset whose aggregation details are to be fetched specifically. It is an optional parameter and when not specified, aggregation for all the dataset fields is returned by default. The field IDs must be comma-separated, hence the query param should be properly URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get dataset's fields aggregation details."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/documentparser/kfv2/{account_id}/analyse": {
      "post": {
        "description": "Analyse document",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "type": "string"
          }
        ],
        "requestBody": {
          "description": "Payload to analyse document",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analysis results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisResultsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/documentparser/2/{account_id}/simsort": {
      "post": {
        "description": "Analyse document",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "type": "string"
          }
        ],
        "requestBody": {
          "description": "Payload to sort by similarity",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimSortPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Similarity sort results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/event/2/{account_id}/subscription/": {
      "post": {
        "tags": [
          "EventSubscription"
        ],
        "description": "Create New External Subscription",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionRequestSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created External Subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "EventSubscription"
        ],
        "description": "Get all External Subscription details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all External Subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSubscriptionRequestSchema"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/event/2/{account_id}/subscription/{subscription_id}": {
      "get": {
        "tags": [
          "EventSubscription"
        ],
        "description": "Get External Subscription details By Id",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "subscription ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get External Subscription details By Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionRequestSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "EventSubscription"
        ],
        "description": "deleted Any External Subscription",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "subscription ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "deleted External Subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/": {
      "post": {
        "tags": [
          "Case"
        ],
        "summary": "Create a new Case",
        "description": "This endpoint lets you perform authorization checks and create a new flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow. This is an optional parameter.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the flow. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new project, process, case, or channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new flow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new flow could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Get cases to which the current user has access.",
        "description": "This endpoint lets you retrieve all the cases to which you have access",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves flows based on their type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows based on type could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}": {
      "put": {
        "tags": [
          "Case"
        ],
        "description": "Updates the name and/or description of the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "description": "Id of the case system",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the flow"
          },
          "400": {
            "description": "Unable to update the given flow"
          },
          "403": {
            "description": "Unauthorized to modify the given flow"
          }
        }
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "description": "Deletes the flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/duplicate": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "Duplicates the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "case_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the flow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the duplicate flow to be created",
                    "type": "string"
                  },
                  "Prefix": {
                    "description": "Name of the duplicate flow to be created",
                    "type": "string"
                  },
                  "ItemType": {
                    "description": "Name of the duplicate flow to be created",
                    "type": "string"
                  },
                  "DuplicateReports": {
                    "description": "Name of the duplicate flow to be created",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the duplicate flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/archive": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "Archives the specified case and all its child flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/unarchive": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "Restores the given archived flow and all its sub flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique id of the case",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully un-archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to un-archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/permissible/list": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "Get all models (Process, Dataset, DatasetView, List) to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of account",
            "required": true
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "unique id of the flow which contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type_filter",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/report/": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "Creates a new report for the given case system",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Id of the case system for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the report to be created.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new report for the given case system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Report creation failed"
          },
          "403": {
            "description": "Unauthorized to create reports for the given case system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Case"
        ],
        "description": "This endpoint returns a list of reports from the given case system to which the current user has access to.",
        "summary": "Get report list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Case ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched report list successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReportsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of reports for the given case system"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/report/{report_id}": {
      "put": {
        "tags": [
          "Case"
        ],
        "description": "Updates the name of the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "case_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Unique id of the case system under which this report is defined",
            "required": true
          },
          {
            "name": "report_id",
            "description": "Unique id of the report",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Updated name of the report.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the report"
          },
          "400": {
            "description": "Unable to update the given report"
          },
          "403": {
            "description": "Unauthorized to modify the given report"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "description": "Delete the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "unique id of the case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "unique id of the report to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/report/{report_id}/settings": {
      "get": {
        "tags": [
          "Case"
        ],
        "description": "Returns the settings for the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Unique id of the case system",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique id of the report for which settings are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSettings"
                }
              }
            }
          },
          "400": {
            "description": "Failed to retrieve the settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDFailedSaveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/report/{report_id}/duplicate": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "Duplicates the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "case_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the case system to which this report belongs"
          },
          {
            "name": "report_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the report to be duplicated"
          }
        ],
        "responses": {
          "200": {
            "description": "Report duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to duplicate the report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/action/approve": {
      "post": {
        "tags": [
          "Case"
        ],
        "description": "Allows a user to approve the request to create a new case.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "unique id of the case being approved or rejected",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the case"
          },
          "400": {
            "description": "Failed to approve the case"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/explore": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "List all flows",
        "description": "This endpoint lets you retrieve all the configured flows in your Kissflow account.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter."
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "query string to search through filter"
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the flows in the Kissflow account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/explore/archived": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "List all flows",
        "description": "This endpoint lets you retrieve all the configured flows in your Kissflow account.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter."
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "query string to search through filter"
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the flows in the Kissflow account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/explore/owned": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "List all flows",
        "description": "This endpoint lets you retrieve all the configured flows in your Kissflow account.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter."
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "query string to search through filter"
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the flows in the Kissflow account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/recent": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns the flows to which the user has access to and has accessed recently",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          }
        ],
        "responses": {
          "200": {
            "description": "List of recently accessed models accessible to this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to retrieve models for explorer."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/isunique": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Checks if the flow name is unique",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the flow which needs to be checked",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns whether the name of the flow is unique or not"
          },
          "400": {
            "description": "Flow name is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a new Dataset",
        "description": "This endpoint lets you perform authorization checks and create a new flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the flow. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new Dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new flow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new flow could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get Datasets to which the current user has access.",
        "description": "This endpoint lets you retrieve all the Datasets to which you have access",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves flows based on their type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows based on type could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name and/or description of the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the flow"
          },
          "400": {
            "description": "Unable to update the given flow"
          },
          "403": {
            "description": "Unauthorized to modify the given flow"
          }
        }
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Deletes the flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/duplicate": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Duplicates the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the flow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the duplicate flow to be created",
                    "type": "string"
                  },
                  "DuplicateViews": {
                    "description": "Indicates whether views should be duplicated",
                    "type": "boolean"
                  },
                  "DuplicateDatasetData": {
                    "description": "Indicates whether dataset data should to be duplicated",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the duplicate flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/permissible/list": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get all models (Process, Dataset, DatasetView, List) to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of account",
            "required": true
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "unique id of the flow which contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type_filter",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/datasetview/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Creates a new dataset view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "Unique id of the dataset for which the view is created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the dataset view to be created",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new view for the given dataset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "View creation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to create views for the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/datasetview/{view_id}/settings": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns the basic information about the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "Unique id of the dataset to which this view belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique id of the datasetview",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information about the flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          },
          "403": {
            "description": "Unable to retrieve the information about the given datasetview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/datasetview/{view_id}/security": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get the shared flows settings for the given datasetview",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "Unique id of the dataset to which this view belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique id of the datasetview",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the shared flows settings for the given datasetview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Security"
                }
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the shared flows settings for the given datasetview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Save the shared flows settings for the given datasetview",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "Unique id of the dataset to which this view belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique id of the datasetview",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Security"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully saved the shared flows settings for the given datasetview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to save the shared flows settings for the given datasetview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/datasetview/{view_id}": {
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Delete the given datasetview",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "Unique id of the dataset to which this view belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique id of the datasetview",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the datasetview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to delete view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/datasetview/{view_id}/permissible/list": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get all models (Process, Dataset, DatasetView, Channels) to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "unique id of the dataset to which this view belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "unique id of the view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_types",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/dataset/{dataset_id}/action/approve": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Allows a user to approve the request to create a new dataset.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "dataset_id",
            "in": "path",
            "description": "unique id of the dataset being approved or rejected",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the dataset"
          },
          "400": {
            "description": "Failed to approve the dataset"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Create a new Form",
        "description": "This endpoint lets you perform authorization checks and create a new flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the flow. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new project, process, case, or channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new flow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new flow could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name and/or description of the given flow",
        "summary": "Update the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the flow"
          },
          "400": {
            "description": "Unable to update the given flow"
          },
          "403": {
            "description": "Unauthorized to modify the given flow"
          }
        }
      }
    },
    "/flow/2/{account_id}/form/{form_id}/duplicate": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Duplicates the given flow",
        "summary": "Duplicate the given form",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the flow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the duplicate flow to be created",
                    "type": "string"
                  },
                  "DuplicateViews": {
                    "description": "Indicates whether views should be duplicated",
                    "type": "boolean"
                  },
                  "DuplicateFormData": {
                    "description": "Indicates whether form data should to be duplicated",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the duplicate flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/permissible/list": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get all models (Process, Dataset, DatasetView, List, Form) to which the specified model has access to",
        "summary": "Get all models to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of account",
            "required": true
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "unique id of the flow which contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type_filter",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/archive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Archives the specified form and all its child flows",
        "summary": "Archives the specified form and all its child flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/unarchive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Restores the given archived flow and all its sub flows",
        "summary": "Restores the given archived flow and all its sub flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique id of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully un-archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to un-archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/formview/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Creates a new form view",
        "summary": "Create new data form view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique id of the form for which the view is created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the form view to be created",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new view for the given form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "View creation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to create views for the form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/formview/{view_id}": {
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Delete the given formview",
        "summary": "Delete the given data form view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique id of the form to which this view belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique id of the formview",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the formview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to delete view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/formview/{view_id}/permissible/list": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get all models (Process, Dataset, formview, Channels) to which the specified model has access to",
        "summary": "Get all flows to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "unique id of the form to which this view belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "unique id of the view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_types",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/report/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Creates a new report for the given form",
        "summary": "Create a new data form report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Id of the form for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the report to be created",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new report for the given form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Report creation failed"
          },
          "403": {
            "description": "Unauthorized to create reports for the given form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns a list of reports from the given form to which the current user has access to",
        "summary": "Returns a list of reports from the given form to which the current user has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Id of the form for which the reports need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReportsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of reports for the given form"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/report/{report_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name of the given report",
        "summary": "Update the data form report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "form_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Unique id of the form under which this report is defined",
            "required": true
          },
          {
            "name": "report_id",
            "description": "Unique id of the report",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the report to be created.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the report"
          },
          "400": {
            "description": "Unable to update the given report"
          },
          "403": {
            "description": "Unauthorized to modify the given report"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Delete the given report",
        "summary": "Delete the data form report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "unique id of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "unique id of the report to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/report/{report_id}/settings": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns the settings for the given report",
        "summary": "Returns the settings for the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique id of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique id of the report for which settings are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSettings"
                }
              }
            }
          },
          "400": {
            "description": "Failed to retrieve the settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDFailedSaveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/form/{form_id}/report/{report_id}/duplicate": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Duplicates the given report",
        "summary": "Duplicate the given data form report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "form_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the form to which this report belongs"
          },
          {
            "name": "report_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the report to be duplicated"
          }
        ],
        "responses": {
          "200": {
            "description": "Report duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to duplicate the report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/integration/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a new integration",
        "description": "This endpoint lets you perform authorization checks and create a new flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new project, process, case, or channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new flow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new flow could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/integration/{integration_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name and/or description of the given integration",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the flow"
          },
          "400": {
            "description": "Unable to update the given flow"
          },
          "403": {
            "description": "Unauthorized to modify the given flow"
          }
        }
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Deletes the flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integration_id",
            "in": "path",
            "description": "unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/integration/{integration_id}/archive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Archives the specified integration",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "integration_id",
            "in": "path",
            "description": "Unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/integration/{integration_id}/unarchive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Restores the given archived flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "integration_id",
            "in": "path",
            "description": "Unique id of the integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully un-archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to un-archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/integration/{integration_id}/action/approve": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Allows a user to approve the request to create a new integration.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "integration_id",
            "in": "path",
            "description": "unique id of the integration being approved or rejected",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the integration"
          },
          "400": {
            "description": "Failed to approve the integration"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/list/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a new List",
        "description": "This endpoint lets you perform authorization checks and create a new flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the flow. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new project, process, case, or channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new flow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new flow could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get Lists to which the current user has access.",
        "description": "This endpoint lets you retrieve all the lists to which you have access",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves flows based on their type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows based on type could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/list/{list_id}": {
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Deletes the flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list_id",
            "in": "path",
            "description": "unique id of the list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name and/or description of the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the flow"
          },
          "400": {
            "description": "Unable to update the given flow"
          },
          "403": {
            "description": "Unauthorized to modify the given flow"
          }
        }
      }
    },
    "/flow/2/{account_id}/list/{list_id}/duplicate": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Duplicates the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the flow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the duplicate list to be created",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the duplicate flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/list/{list_id}/permissible/list": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get all models (Process, Dataset, DatasetView, List) to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of account",
            "required": true
          },
          {
            "name": "list_id",
            "in": "path",
            "description": "unique id of the flow which contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type_filter",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/list/{list_id}/items/": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns all the items from the given List",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the List"
          }
        ],
        "responses": {
          "200": {
            "description": "Items from the given List"
          },
          "404": {
            "description": "Given List doesn't exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the items for the given List",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the List"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the Items for the given List"
          },
          "400": {
            "description": "Unable to update list items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Create a new Case",
        "description": "This endpoint lets you perform authorization checks and create a new flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the flow. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new project, process, case, or channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new flow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new flow could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Process"
        ],
        "summary": "Get Processes to which the current user has access.",
        "description": "This endpoint lets you retrieve all the processes to which you have access",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves flows based on their type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows based on type could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}": {
      "put": {
        "tags": [
          "Process"
        ],
        "description": "Updates the name and/or description of the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the flow"
          },
          "400": {
            "description": "Unable to update the given flow"
          },
          "403": {
            "description": "Unauthorized to modify the given flow"
          }
        }
      },
      "delete": {
        "tags": [
          "Process"
        ],
        "description": "Deletes the flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "unique id of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/archive": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Archives the specified process and all its child flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/unarchive": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Restores the given archived flow and all its sub flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique id of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully un-archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to un-archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/duplicate": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Duplicates the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the flow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow.",
                    "type": "string"
                  },
                  "DuplicateReports": {
                    "description": "Indicates whether reports should to be duplicated",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the duplicate flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/card/settings": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Retrieves the Appearance settings of the given process",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "unique id of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the appearance settings"
          },
          "400": {
            "description": "Unable to retrieve the appearance settings of the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Saves the appearance settings of the flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Unique id of the process",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully saved appearance settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to save appearance settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized attempt to save appearance settings"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/counter": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Returns the counter settings for the given process",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique id of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Counter settings for the given process'"
          },
          "400": {
            "description": "Unable to retrieve the counter settings for the given process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/counter/reset": {
      "put": {
        "tags": [
          "Process"
        ],
        "description": "Resets the counter for the given process",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique id of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "counter_configuration": {
                    "description": "counter settings for the given process",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Counter reset successfully"
          },
          "400": {
            "description": "Unable to reset the counter for the given process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/permissible/list": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get all models (Process, Dataset, DatasetView, List) to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of account",
            "required": true
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "unique id of the flow which contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type_filter",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/action/approve": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Allows a user to approve the request to create a new process.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "unique id of the process being approved or rejected",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the process"
          },
          "400": {
            "description": "Failed to approve the process"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a new Project",
        "description": "This endpoint lets you perform authorization checks and create a new flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the flow.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the flow. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new project, process, case, or channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new flow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new flow could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get projects to which the current user has access.",
        "description": "This endpoint lets you retrieve all the projects to which you have access",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves flows based on their type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows based on type could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name and/or description of the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the flow"
          },
          "400": {
            "description": "Unable to update the given flow"
          },
          "403": {
            "description": "Unauthorized to modify the given flow"
          }
        }
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Deletes the flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "unique id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/archive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Archives the specified project and all its child flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/unarchive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Restores the given archived flow and all its sub flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully un-archived the given flow and its child flows"
          },
          "400": {
            "description": "Failed to un-archive the given flow"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/permissible/list": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get all models (Process, Dataset, DatasetView, List) to which the specified model has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of account",
            "required": true
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "unique id of the flow which contains the lookup field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flow_type_filter",
            "in": "query",
            "description": "one or more comma-separated flow types to filter the result",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models accessible to this model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/duplicate": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Duplicates the given flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "unique id of the flow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the duplicate project to be created",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the duplicate flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve flows in Kissflow could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/action/approve": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Allows a user to approve the request to create a new project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "unique id of the project being approved or rejected",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the project"
          },
          "400": {
            "description": "Failed to approve the project"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/report/": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Creates a new report for the given process",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of the process for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the report to be created",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new report for the given process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Report creation failed"
          },
          "403": {
            "description": "Unauthorized to create reports for the given process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Returns a list of reports from the given process to which the current user has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of the process for which the reports need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReportsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of reports for the given process"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/report/{report_id}": {
      "put": {
        "tags": [
          "Process"
        ],
        "description": "Updates the name of the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "process_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Unique id of the process under which this report is defined",
            "required": true
          },
          {
            "name": "report_id",
            "description": "Unique id of the report",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the report to be created.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the report"
          },
          "400": {
            "description": "Unable to update the given report"
          },
          "403": {
            "description": "Unauthorized to modify the given report"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/report/{report_id}/duplicate": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Duplicates the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the process to which this report belongs"
          },
          {
            "name": "report_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the report to be duplicated"
          }
        ],
        "responses": {
          "200": {
            "description": "Report duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to duplicate the report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/process/{process_id}/report/{report_id}/settings": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Returns the settings for the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique id of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique id of the report for which settings are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSettings"
                }
              }
            }
          },
          "400": {
            "description": "Failed to retrieve the settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDFailedSaveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/user/{flow_id}/security": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Save the security settings for the extended user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "flow_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of user management.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Security"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the security settings for extended user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to save security settings for extended user"
          },
          "403": {
            "description": "Unauthorized to update the security settings for extended user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Get the security settings for extended user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of account"
          },
          {
            "name": "flow_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of user management.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Security settings for extended user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Security"
                }
              }
            }
          },
          "403": {
            "description": "Unable to retrieve the security settings for extended user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/report/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Creates a new report for the given project",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of the project for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the report",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new report for the given project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Report creation failed"
          },
          "403": {
            "description": "Unauthorized to create reports for the given project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns a list of reports from the given project to which the current user has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of the project for which the reports need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReportsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of reports for the given project"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/report/{report_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name of the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Unique id of the project under which this report is defined",
            "required": true
          },
          {
            "name": "report_id",
            "description": "Unique id of the report",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the project report",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the report"
          },
          "400": {
            "description": "Unable to update the given report"
          },
          "403": {
            "description": "Unauthorized to modify the given report"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/report/{report_id}/duplicate": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Duplicates the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the project to which this report belongs"
          },
          {
            "name": "report_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the report to be duplicated"
          }
        ],
        "responses": {
          "200": {
            "description": "Report duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to duplicate the report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/report/{report_id}/settings": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns the settings for the given report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique id of the report for which settings are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSettings"
                }
              }
            }
          },
          "400": {
            "description": "Failed to retrieve the settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDFailedSaveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/metric/": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns a list of metrics from the given project flow to which the current user has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of the project for which the metrics need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetricsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of metrics for the given project"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/projectflow/{project_flow_id}/report/": {
      "post": {
        "deprecated": true,
        "tags": [
          "Flow"
        ],
        "description": "Creates a new report for the given project.\n\nAlternate API: POST /flow/2/{account_id}/project/{project_id}/report/",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of the project for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Id of the project workflow for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the report",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new report for the given project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Report creation failed"
          },
          "403": {
            "description": "Unauthorized to create reports for the given project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "deprecated": true,
        "tags": [
          "Flow"
        ],
        "description": "Returns a list of reports from the given project to which the current user has access to.\n\nAlternate API: GET /flow/2/{account_id}/project/{project_id}/report/",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of the project for which the reports need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Id of the project workflow for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReportsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of reports for the given project"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/projectflow/{project_flow_id}/report/{report_id}": {
      "put": {
        "deprecated": true,
        "tags": [
          "Flow"
        ],
        "description": "Updates the name of the given report.\n\nAlternate API: PUT /flow/2/{account_id}/project/{project_id}/report/{report_id}",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Unique id of the project under which this report is defined",
            "required": true
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Id of the project workflow for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "description": "Unique id of the report",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the project report",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the report"
          },
          "400": {
            "description": "Unable to update the given report"
          },
          "403": {
            "description": "Unauthorized to modify the given report"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/projectflow/{project_flow_id}/report/{report_id}/duplicate": {
      "post": {
        "deprecated": true,
        "tags": [
          "Flow"
        ],
        "description": "Duplicates the given report.\n\nAlternate API: POST /flow/2/{account_id}/project/{project_id}/report/{report_id}/duplicate",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the project to which this report belongs"
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Id of the project workflow for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique id of the report to be duplicated"
          }
        ],
        "responses": {
          "200": {
            "description": "Report duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to duplicate the report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/projectflow/{project_flow_id}/report/{report_id}/settings": {
      "get": {
        "deprecated": true,
        "tags": [
          "Flow"
        ],
        "description": "Returns the settings for the given report.\n\nAlternate API: GET /flow/2/{account_id}/project/{project_id}/report/{report_id}/settings",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Id of the project workflow for which the report is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique id of the report for which settings are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSettings"
                }
              }
            }
          },
          "400": {
            "description": "Failed to retrieve the settings for the given report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDFailedSaveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/project/{project_id}/projectflow/{project_flow_id}/metric/": {
      "get": {
        "deprecated": true,
        "tags": [
          "Flow"
        ],
        "description": "Returns a list of metrics from the given project flow to which the current user has access to.\n\nAlternate API: GET /flow/2/{account_id}/project/{project_id}/metric/",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Id of the project for which the metrics need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Id of the project workflow for which the metric is to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetricsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of metrics for the given project"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a new Team",
        "description": "This endpoint lets you create a new team.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the team.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the team. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new team could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new team could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get teams to which the current user has access.",
        "description": "This endpoint lets you retrieve all the teams to which you have access",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves user's teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve user's teams could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name and/or description of the given team",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the team"
          },
          "400": {
            "description": "Unable to update the given team"
          },
          "403": {
            "description": "Unauthorized to modify the given team"
          }
        }
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Deletes the team",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "unique id of the team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}/archive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Archives the specified team and all its child flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "Unique id of the team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully archived the given team and its child flows"
          },
          "400": {
            "description": "Failed to archive the given team"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}/unarchive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Restores the given archived team and all its sub flows",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "Unique id of the team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully un-archived the given team and its child flows"
          },
          "400": {
            "description": "Failed to un-archive the given team"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}/action/approve": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Allows a user to approve the request to create a new team.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "unique id of the team being approved or rejected",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully approved the team"
          },
          "400": {
            "description": "Failed to approve the team"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}/channel/": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a new Channel",
        "description": "This endpoint lets you create a new channel.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          },
          {
            "name": "team_id",
            "description": "Unique ID of the team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the channel.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "Brief description of the channel. This is an optional parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully creates a new channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new channel could not be processed due to a malformed request syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new channel could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get channels",
        "description": "This endpoint lets you retrieve all the channels",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true
          },
          {
            "name": "team_id",
            "description": "Unique ID of the team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves channels based on their type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplorerResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to retrieve channels based on type could not be processed due to a malformed request syntax."
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}/channel/{channel_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Updates the name and/or description of the given channel",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "description": "Unique ID of the team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "description": "Unique ID of the channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the channel"
          },
          "400": {
            "description": "Unable to update the given channel"
          },
          "403": {
            "description": "Unauthorized to modify the given channel"
          }
        }
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "description": "Deletes the channel",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "Unique ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Unique ID of the Channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unknown exception occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}/channel/{channel_id}/archive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Archive the channel",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "Unique ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Unique ID of the Channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel archived successfully"
          },
          "400": {
            "description": "Unknown exception occurred"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/team/{team_id}/channel/{channel_id}/unarchive": {
      "post": {
        "tags": [
          "Flow"
        ],
        "description": "Un archive the channel",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "Unique ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "path",
            "description": "Unique ID of the Channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel unarchived successfully"
          },
          "400": {
            "description": "Unknown exception occurred"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/metric/": {
      "get": {
        "tags": [
          "Flow"
        ],
        "description": "Returns a list of metrics from the given case flow to which the current user has access to",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "case_id",
            "in": "path",
            "description": "Id of the case for which the metrics need to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetricsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized to get the list of metrics for the given case"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/flow/2/{account_id}/case/{case_id}/metric/{metric_id}/member/batch": {},
    "/flow/2/{account_id}/case/{case_id}/metric/{metric_id}/member": {},
    "/flow/2/{account_id}/case/{case_id}/metric/{metric_id}/member/{member_id}": {},
    "/form-report/2/{account_id}/{form_id}/{report_id}/aggregation": {
      "get": {
        "tags": [
          "Report"
        ],
        "description": "Returns summary of whole report, all entries",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique ID generated of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary result for each report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Returned when called for reports other than tabular report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Form ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form-report/2/{account_id}/{form_id}/{report_id}/fields": {
      "get": {
        "tags": [
          "Report"
        ],
        "description": "Get report Fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique ID generated of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of fields selected for tabular Report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TabularReportFields"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Form ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form-report/2/{account_id}/{form_id}/{report_id}/export": {
      "get": {
        "tags": [
          "Report"
        ],
        "description": "Export Report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique ID generated of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "export type csv/json/pdf",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported report based on type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Form ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form-report/2/{account_id}/{form_id}/{report_id}/count": {
      "get": {
        "tags": [
          "Report"
        ],
        "description": "Count of report results",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique ID generated of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search query string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Form ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form-report/2/{account_id}/{form_id}/{report_id}": {
      "get": {
        "tags": [
          "Report"
        ],
        "description": "View Chart report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique ID generated of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "view Chart report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Form ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form-report/2/{account_id}/preview/{form_id}/{report_id}": {
      "post": {
        "tags": [
          "Report"
        ],
        "description": "Preview Report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Unique ID generated of the form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "view Chart report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Form ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form-report/2/{account_id}/{form_id}/{report_id}/{instance_id}": {
      "get": {
        "tags": [
          "Report"
        ],
        "description": "Get Item",
        "parameters": [
          {
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "form_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "report_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "instance_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}": {
      "post": {
        "tags": [
          "Form"
        ],
        "description": "Create a new form record",
        "summary": "Create a new form record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifier for each form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to create a new form record <br /> Name - `Key` column value of the form. It is a unique string that identifies the record you are trying to create in the form. It is a mandatory parameter<br /> Field1 - Value to be added in the `Field1` column in the form",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Field1": {
                    "type": "string"
                  }
                },
                "example": {
                  "Name": 10,
                  "Field1": "Blackwidow"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Added the form record successfully"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Form"
        ],
        "description": "Delete a specific form record",
        "summary": "Delete a specific form record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifier for each form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted the form record successfully"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Form"
        ],
        "description": "Update an existing form record",
        "summary": "Update an existing form record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifier for each form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to update a form record <br /> Name - `Key` column value of the form. It is a unique string that identifies the record you are trying to update in the form. It is a mandatory parameter<br /> Field1 - Value to be updated in the `Field1` column in the form",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Field1": {
                    "type": "string"
                  }
                },
                "example": {
                  "Name": 10,
                  "Field1": "Blackwidow"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated the form record successfully"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Get an existing form record",
        "summary": "Get an existing form record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifier for each form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Key column value of the form. It is a unique string that identifies the record you are trying to fetch from the form. It is a mandatory parameter<br />",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Instance by the instance name(key field)"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{instance_id}": {
      "delete": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you delete an item from the form flow.",
        "summary": "Delete an Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of the item to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a specific item",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The Instance Id."
                    },
                    "_is_deleted": {
                      "type": "boolean",
                      "description": "Deletion status of the item"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you retrieve all the details of an item.",
        "summary": "Retrieve all item details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique instance id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the details of a specific item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItem"
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you update the form item values.",
        "summary": "Update values of the form item.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your Kissflow Instance id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to update the visited status of the form item.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "field1": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updated an item successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_modified_at": {
                      "type": "string",
                      "description": "Value modification timestamp"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/batch/delete": {
      "post": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you delete multiple items from the form flow.",
        "summary": "Delete multiple form items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to delete multiple form items <br /> _id - instance id of the form items",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delete multiple form items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "The Instance Id."
                      },
                      "_is_deleted": {
                        "type": "boolean",
                        "description": "Deletion status of the item"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/list": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you retrieve all the items of a form.",
        "summary": "Get form records",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the items of a specified form flow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{instance_id}/submit": {
      "post": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you submit the form item.",
        "summary": "Submit the form item.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your Kissflow Instance id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Form item submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_modified_at": {
                      "type": "string",
                      "description": "Value modification timestamp"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{instance_id}/visited": {
      "put": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you update the visited status of the form item.",
        "summary": "Update visited status of the form item.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your Kissflow Instance id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated item as visited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_visited": {
                      "type": "boolean",
                      "description": "Visited status of the instance id."
                    },
                    "_modified_at": {
                      "type": "string",
                      "description": "Visited status modification timestamp"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found to be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/fields": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Get Field list of form",
        "summary": "Get Field list of form",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Field in Form",
            "content": {
              "application/json": {
                "schema": {
                  "type": "Json",
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/count": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you retrieve unvisited and total submissions for a form flow.",
        "summary": "Retrieve unvisited and total submissions for a form flow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the details of a specific item.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unvisited": {
                      "type": "integer",
                      "description": "count of unvisited form items in the given form id"
                    },
                    "submissions": {
                      "type": "integer",
                      "description": "total submissions of form items in the given form id"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{instance_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Lookup Data for a reference field",
        "summary": "Retrieve data for a lookup field from a reference field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form or view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance ID for the specific form or view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/lookup": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Lookup data from other services",
        "summary": "Retrieve lookup data from other services",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup data from other services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/lookup/fields": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Get Field list of Form",
        "summary": "List all the fields in form",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Field in Form",
            "content": {
              "application/json": {
                "schema": {
                  "type": "Json",
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{field_id}/isempty": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Create New Unique key constraint for field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field in form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for successful creation of Unique Key constraint",
            "content": {
              "application/json": {
                "schema": {
                  "type": "Json",
                  "$ref": ""
                }
              }
            }
          }
        }
      }
    },
    "/form/2/{account_id}/{form_id}/{row_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you upload file to an attachment field in row.",
        "summary": "Add attachment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new attachment to your form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{row_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you upload image to field in row.",
        "summary": "Add image file",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image file to your form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you download an image from a form field.",
        "summary": "Download image from form",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from your form field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download an image from a form field could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/aggregation": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Get aggregation across page of form grid",
        "summary": "Get aggregation across page of form grid",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get aggregation across page of form grid"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/aggregate": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Get aggregation result for aggregation field in another service",
        "summary": "Get aggregation result for aggregation field in another service",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get aggregation result for aggregation field in another service"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{instance_id}/lookup": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Get instance value for lookup save",
        "summary": "Get instance value for lookup save",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of Record",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get instance value for lookup save"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/update": {
      "patch": {
        "tags": [
          "Form"
        ],
        "description": "Create a new form record or update an existing one",
        "summary": "Create a new form record or update an existing one",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifier for each form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload to create/update form record <br /> Name - `Key` column value of the form. It is a unique string that identifies the record you are trying to insert/update in the form. It is a mandatory parameter<br /> Field1 - Value to be added/updated in the `Field1` column in the form",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Field1": {
                    "type": "string"
                  }
                },
                "example": {
                  "Name": 10,
                  "Field1": "Blackwidow"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created/updated form successfully"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{row_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "This endpoint lets you download a specific attachment file from a field in a row of your form.",
        "summary": "Download attachment from form",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment from your form field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download a specific attachment from a form field could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/allfields": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "List all Fields in a Model Exclude Child",
        "summary": "List all Fields in a Model Exclude Child",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of a form whose field needed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all Fields in a Model Exclude Child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/{instance_id}/{table_id}/{table_instance_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Lookup Data for a reference field in Child",
        "summary": "Lookup Data for a reference field in Child",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of a form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of parent Instance from which lookup data called",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "ID of a child model whose field is reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_instance_id",
            "in": "path",
            "description": "ID of child Instance calls lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field in Child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/list": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you retrieve all the items of a view.",
        "summary": "Get form records",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Your Kissflow View id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the items of a specified form view flow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/preview": {
      "post": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you preview all the items of a view.",
        "summary": "Get form records",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Your Kissflow View id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request lets you preview all the items of a specified form view flow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/fields": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you retrieve all the fields in a form view flow.",
        "summary": "Retrieve all fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Your Kissflow View id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all the fields in a form view flow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/count": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you retrieve count of form items in the form view",
        "summary": "Retrieve the number of form view items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "Your Kissflow Form id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Your unique view id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the count of items in the form view",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Total count of items in the form view"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified item could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/lookup/fields": {
      "get": {
        "tags": [
          "Form"
        ],
        "description": "Get Field list of form",
        "summary": "Get Field list of form",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Field in form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/aggregation": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "Get aggregation across page of view grid",
        "summary": "Get aggregation across page",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of form view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get aggregation across page of view grid"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/{instance_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "Lookup Data for a reference field",
        "summary": "Lookup Data for a reference field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of form or view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance ID for the specific form or view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/lookup": {
      "post": {
        "tags": [
          "FormView"
        ],
        "description": "Lookup data from other services",
        "summary": "Lookup data from other services",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of form view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Lookup aggregation intermediate datastruct",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryDefinitionIntermediateDataStructure"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lookup data from other services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/{instance_id}/lookup": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "Get instance value for lookup save",
        "summary": "Get instance value for lookup save",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of form view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of a record",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get instance value for lookup save"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/row/{row_id}": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "Get an existing form view record",
        "summary": "Get an existing form view record",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifier for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:FormView ID>> is a unique identifier for each view in form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "Unique row id value for the form rows",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Instance by the instance row id"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/aggregate": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "Get aggregation result for aggregation field in another service",
        "summary": "Get aggregation result for aggregation field in another service",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of form view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get aggregation result for aggregation field in another service"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/{row_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you upload file to an attachment field in row.",
        "summary": "Add attachment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:FormView ID>> is a unique identifyer for each view in form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new attachment to your form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/{row_id}/{field_id}/image": {
      "post": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you upload image to field in row.",
        "summary": "Add image file",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:FormView ID>> is a unique identifyer for each view in form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image file to your form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you download an image from a field in your form view.",
        "summary": "Download image from form view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:FormView ID>> is a unique identifyer for each view in form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from a field in your form view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download an image from a field in your form view could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/{row_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "This endpoint lets you download a specific attachment file from a field in your form view.",
        "summary": "Download attachment from form view",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "The <<glossary:Form ID>> is a unique identifyer for each form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "The <<glossary:FormView ID>> is a unique identifyer for each view in form, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "The <<glossary:Row ID>> is a unique identifyer for each row, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The <<glossary:Field ID>> is a unique identifyer for each field, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment file from a field in your form view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "The request to download a specific attachment from a field in your form view could not be processed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/field/{field_id}/values": {
      "get": {
        "tags": [
          "FormView"
        ],
        "description": "List possible values for the specified field",
        "summary": "List possible values for the specified field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of a form view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Field for which value to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List value for the specified Field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListValueofField"
                }
              }
            }
          },
          "404": {
            "description": "Specified field is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/batch": {
      "post": {
        "tags": [
          "FormView"
        ],
        "description": "Batch Update of Form Records",
        "summary": "Batch Update of Form Records",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "in": "path",
            "description": "ID of form",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "ID of form view",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Post body with data to update on view",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "form view rows updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateDictOfAInstance"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/form/2/{account_id}/{form_id}/view/{view_id}/param": {},
    "/portal/kfv2/{account_id}/{portal_id}/user/license": {
      "patch": {
        "tags": [
          "Portal"
        ],
        "description": "Update user license",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portal_id",
            "in": "path",
            "description": "ID of portal",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserLicense"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Api Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified portal does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{table_id}/{table_instance_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Lookup Data for a reference field in Child",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of parent Instance from which lookup data called",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "ID of context of the Instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "ID of a child model whose field is reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_instance_id",
            "in": "path",
            "description": "ID of child Instance calls lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field in Child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/lookup": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Lookup data from other services",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup data from other services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{parent_model_id}/table/{table_id}/fields": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "List all Fields in Child Model of a process",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parent_model_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "ID of a child table in the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all Fields in Child Model of a process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{activity_id}/fields": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "List of Fields in a model on a step context",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_id",
            "in": "path",
            "description": "ID of a step",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Fields in a model on a step context",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/fields": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "List all Fields in a Model Exclude Child",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process whose field needed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all Fields in a Model Exclude Child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Lookup Data for a reference field in Parent model",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of Instance calls lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "ID of context of the Instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field in Parent model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponseOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/{status}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get MyItems Grid Data",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Request on which status need to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get MyItems Grid Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/pending/{activity_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Pending Request Grid Data",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_id",
            "in": "path",
            "description": "Id of step on which request pending with",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Pending Request Grid Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/pending/activity/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Pending Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Pending Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingTaskCount"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/status/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get My Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get My Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCount"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/fields": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "List of Fields in a model on a draft context",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Fields in a model on a step context",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/allfields": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "List all Fields in a Model Exclude Child",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process whose field needed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all Fields in a Model Exclude Child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/lookup/fields": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "List all Fields in a Model Exclude Child",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process whose field needed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all Fields in a Model Exclude Child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/participated": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get MyItems Grid Data",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get MyItems Grid Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/participated/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Participated Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Participated Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/{status}/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get My Specific Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get My Specific Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you create a new item request in your process.",
        "summary": "Create a new item request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request creates a new item in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "InstanceId": {
                      "type": "string",
                      "description": "The Instance Id."
                    },
                    "ModelId": {
                      "type": "string",
                      "description": "The Model Id."
                    },
                    "ActivityInstanceId": {
                      "type": "string",
                      "description": "The Activity Instance Id ."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/submit": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you submit a specific item at workflow step in your process.",
        "summary": "Submit an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request submits an item at a specific process workflow step.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Submitted successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}": {
      "delete": {
        "tags": [
          "Process"
        ],
        "description": "Delete Request in Draft",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Request in Draft",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Deleted successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/withdraw": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Withdraw a Request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Withdraw Note needed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Note": {
                    "type": "string",
                    "example": "Need a Withdraw Note"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdraw a Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Withdrawn successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/reject": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you reject a specific item at workflow step in your process.",
        "summary": "Reject an item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Add your rejection note",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Note": {
                    "type": "string",
                    "example": "Need a Reject Note"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request rejects an item at a specific process workflow step.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Rejected successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/pending/{activity_id}/aggregation": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Lookup data from other services",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_id",
            "in": "path",
            "description": "ID of a Activity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregation per page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/{status}/aggregation": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Lookup data from other services",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregation per page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationDict"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/restart": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Restart item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity Instance Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restart item",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The Instance Id."
                    },
                    "ModelId": {
                      "type": "string",
                      "description": "The Model Id."
                    },
                    "_activity_instance_id": {
                      "type": "string",
                      "description": "The Activity Instance Id"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve the details of an item at a specific workflow step of your Kissflow process.",
        "summary": "Get item details at workflow step",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Step Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the item details at a specific workflow step in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Update Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity instance id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "values that needs to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDictOfAInstance"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstanceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/progress": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve the progress of a specific item in your process.",
        "summary": "Get progress details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the progress details of a specific item in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Process"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload an attachment file to your process' form field. You can add an attachment in the following file formats - .pdf, .doc, .ppt, .xls, .jpg, .jpeg, .jpe, .png, .gif, or .mp4.",
        "summary": "Add attachment to form field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new attachment to your process form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{table_id}/{row_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload attachment files to a table in your process form. You can add an attachment in the following file formats - .pdf, .doc, .ppt, .xls, .jpg, .jpeg, .jpe, .png, .gif, or .mp4.",
        "summary": "Add attachment to table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds new attachments to a table in your process form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload an image file to your process' form field. You can add an image in the following file formats - .jpg, .jpeg, .jpe, .png, or .gif. Only the Flow Admin can invoke this API.",
        "summary": "Add image to form field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image file to your process form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download an image file from your process item's form field.",
        "summary": "Download image from form field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image file from your process item's form field.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{table_id}/{row_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload an image file to a table in your process form. You can add an image in the following file formats - .jpg, .jpeg, .jpe, .png, or .gif.",
        "summary": "Add image to table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity instance id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image to a table in your process form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download an image file from a table in your process form.",
        "summary": "Download image from table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity instance id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from a table in your process form.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/reassign": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Reassign  a Request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Approver Reassign",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Reassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reassign a Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Reassign successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/initiator/reassign": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Reassign  a Request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Initiator Reassign",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Reassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reassign a Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Reassign successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/sendback": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "SentBack a Request",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Sendback Path",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendBack"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SentBack a request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Sent back successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/sendback/path": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "SentBack Path",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity Instance Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SentBack Path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendBackPath"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/reset_counter": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Reset counter",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Process Id of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Counter value that needs to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "StartCounter": {
                    "type": "integer",
                    "example": 10001
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset counter",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Reset successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/batch": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Batch Update Items",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "values that needs to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download a specific attachment file from your process item's form field.",
        "summary": "Download attachment from form field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment file from your process item's form field.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{table_id}/{row_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download a specific attachment file from a table in your process item's form field.",
        "summary": "Download attachment from table field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "The <<glossary:Step Instance ID>> is the unique identifier for a particular step, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment from a table field of your process form field.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/batch/create/submit": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Batch Create Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "values that needs to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/analytics/fields": {},
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{field_id}/signature": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download an signature file from a field in your process form.",
        "summary": "Download signature from table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity instance id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an signature from a table in your process form.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/{instance_id}/{activity_instance_id}/{table_id}/{row_id}/{field_id}/signature": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download an image file from a table in your process form.",
        "summary": "Download image from table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity instance id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from a table in your process form.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get My Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get My Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/pending/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get My Pending Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get My Pending Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve all the items that you have initiated and participated in your process.",
        "summary": "Get my item list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves all the items that you've initiated in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingItems"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/pending": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve all the items that are awaiting your approval at any specific step in a process.",
        "summary": "Get my task list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves all the items that are awaiting your approval at any step in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingItems"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/myitems/p{page_number}/{page_size}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve all the items that you have initiated and participated in your process.",
        "summary": "Get my item list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "path",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "The number of items that can be listed in a page. It can be assigned any integer. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves all the items that you've initiated in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingItems"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/{process_id}/pending/p{page_number}/{page_size}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve all the items that are awaiting your approval at any specific step in a process.",
        "summary": "Get my task list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "path",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "The number of items that can be listed in a page. It can be assigned any integer. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves all the items that are awaiting your approval at any step in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingItems"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get All Items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get All Items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminTaskCount"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item/appdata/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "App Data items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App Data items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item/{status}/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Item Status Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Item Status Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve the list of all items from a Kissflow process. Only Process Admins can call this endpoint.",
        "summary": "Get the item list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the list of all items in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item/{status}/aggregation": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Aggregation across Page",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Aggregation across Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationDict"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}": {
      "put": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint helps you update the records of a specific item in your process. Only Process Admins can call this endpoint.",
        "summary": "Update item details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Name of the process. This is a mandatory parameter.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDictOfAInstance"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates record of a specific item in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstanceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve the details of a specific item from your Kissflow process. Only Process Admins can call this endpoint.",
        "summary": "Get item details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the details of a specific item in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you delete a specific item from your process. Only Process Admins can call this endpoint.",
        "summary": "Delete an item in a process",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Your unique <<glossary:Instance ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request deletes the process item successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Deleted successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/{activity_instance_id}/reassign": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Reassign Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activity_instance_id",
            "in": "path",
            "description": "Activity instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Admin Reassign",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Reassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reassign Item",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Reassigned successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/complete": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "complete Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "values that needs to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchComplete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complete Item",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Completed successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/complete": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "Batch Complete Item",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Id of a process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch Complete Item",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Success": {
                      "type": "string",
                      "description": "The success message.",
                      "example": "Completed successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item/deactivated/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Deactivated user items Count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Model Id of process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivated user items Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload an attachment file to your process' form field. You can add an attachment in the following file formats - .pdf, .doc, .ppt, .xls, .jpg, .jpeg, .jpe, .png, .gif, or .mp4. Only the Flow Admin can invoke this API.",
        "summary": "Add attachment to form field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new attachment to your process form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/{table_id}/{row_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload attachment files to a table in your process form. You can add an attachment in the following file formats - .pdf, .doc, .ppt, .xls, .jpg, .jpeg, .jpe, .png, .gif, or .mp4. Only Flow Admins can invoke this API.",
        "summary": "Add attachment to table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds new attachments to a table in your process form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload an image file to your process' form field. You can add an image in the following file formats - .jpg, .jpeg, .jpe, .png, or .gif. Only the Flow Admin can invoke this API.",
        "summary": "Add image to form field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image file to your process form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download an image file from your process' form field. Only the Flow Admin can invoke this API.",
        "summary": "Flow Admin downloads image",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image file from your process form field.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/{table_id}/{row_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you upload an image file to a table in your process form. You can add an image in the following file formats - .jpg, .jpeg, .jpe, .png, or .gif. Only Flow Admins can invoke this API.",
        "summary": "Add image to table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image to a table in your process form.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDictOfAInstance"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download an image file from a table in your process form. Only Flow Admins can invoke this API.",
        "summary": "Flow Admin downloads image from table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from a table in your process form.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download a specific attachment file from your process' form field. Only the Flow Admin can invoke this API.",
        "summary": "Flow Admin downloads attachment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment file from your process form field.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/{instance_id}/{table_id}/{row_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you download a specific attachment file from a table in your process form. Only Flow Admins can invoke this API.",
        "summary": "Flow Admin downloads attachment from table",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "The <<glossary:Process ID>> is a unique identifier for each process, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "The <<glossary:Instance ID>> is a unique identifier for an individual item, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each row of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "This is a unique identifier assigned to each column of a table in your process form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment from a table in your process form.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item/p{page_number}/{page_size}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Process"
        ],
        "description": "This endpoint lets you retrieve the list of all items from a Kissflow process. Only Process Admins can call this endpoint.",
        "summary": "Get the item list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Process ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "path",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "path",
            "description": "The number of items that can be listed in a page. It can be assigned any integer. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the list of all items in your process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GRIDDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process/2/{account_id}/admin/{process_id}/item/overdue": {},
    "/process/2/{account_id}/admin/{process_id}/action/item/count": {},
    "/process/2/{account_id}/{process_id}/sequencenumber": {},
    "/process/2/{account_id}/{process_id}/sequencenumber/{sequence_id}": {},
    "/process/2/{account_id}/{process_id}/sequencenumber/field/{field_id}": {},
    "/process/2/{account_id}/{process_id}/sequencenumber/{field_id}/sequence/{sequence_id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "description": "Update sequence prefix",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of account"
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "unique id of the flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sequence_id",
            "in": "path",
            "description": "unique sequence id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "NewPrefix": {
                    "description": "new prefix to replace the current one",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the sequence prefix"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/{report_id}": {
      "get": {
        "tags": [
          "ProjectReport"
        ],
        "description": "View Chart report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of a task list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of tasks that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "view Chart report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/{report_id}/count": {
      "get": {
        "tags": [
          "ProjectReport"
        ],
        "description": "Count of report results",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search query string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/{report_id}/fields": {
      "get": {
        "tags": [
          "ProjectReport"
        ],
        "description": "Get report Fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of fields selected for tabular Report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TabularReportFields"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/{report_id}/aggregation": {
      "get": {
        "tags": [
          "ProjectReport"
        ],
        "description": "Returns summary of whole report, all entries",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of a task list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of tasks that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary result for each report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Returned when called for reports other than tabular report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/{report_id}/export": {
      "get": {
        "tags": [
          "ProjectReport"
        ],
        "description": "Export Report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "export type csv/json/pdf",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported report based on type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/{report_id}/{instance_id}": {
      "get": {
        "tags": [
          "ProjectReport"
        ],
        "description": "Get Task",
        "parameters": [
          {
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "project_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "report_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "instance_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/metric/{metric_id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "ProjectReport"
        ],
        "description": "Returns the metric report data based on the metric subtype.",
        "summary": "Get project metric report data",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your Kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique Project flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metric_id",
            "in": "path",
            "description": "Unique metric report ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the metric data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid metric Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/projectflow/{project_flow_id}/{report_id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "ProjectReport"
        ],
        "description": "View Chart report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique Project flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of a task list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of tasks that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "view Chart report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/projectflow/{project_flow_id}/{report_id}/count": {
      "get": {
        "deprecated": true,
        "tags": [
          "ProjectReport"
        ],
        "description": "Count of report results",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique Project flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search query string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/projectflow/{project_flow_id}/{report_id}/fields": {
      "get": {
        "deprecated": true,
        "tags": [
          "ProjectReport"
        ],
        "description": "Get report Fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique Project flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of fields selected for tabular Report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TabularReportFields"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/projectflow/{project_flow_id}/{report_id}/aggregation": {
      "get": {
        "deprecated": true,
        "tags": [
          "ProjectReport"
        ],
        "description": "Returns summary of whole report, all entries",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique Project flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of a task list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of tasks that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary result for each report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Returned when called for reports other than tabular report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/projectflow/{project_flow_id}/{report_id}/export": {
      "get": {
        "deprecated": true,
        "tags": [
          "ProjectReport"
        ],
        "description": "Export Report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique Project flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "export type csv/json/pdf",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported report based on type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Case ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project-report/2/{account_id}/{project_id}/projectflow/{project_flow_id}/{report_id}/{instance_id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "ProjectReport"
        ],
        "description": "Get Task",
        "parameters": [
          {
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "project_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique Project flow ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "instance_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/items": {
      "get": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "Get all tasks for a given project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project flow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all cards created for the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TasksResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/{project_flow_instance_id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you retrieve all the field values of a task in the given project.",
        "summary": "Get field values of a task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_instance_id",
            "in": "path",
            "description": "Unique project flow instance ID generated for you task.This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your task. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves field values of a task in the given project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieve field values of a task in your project failed. Check if the project_id, account_id, or task_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you update field values of a task in the given project.",
        "summary": "Change form field values",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your task. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update a task in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTask"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the field values of a task in the given project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "The request to update the field values of a task in your project failed. Check if the project_id, account_id, or task_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you retrieve all the field values of a task in the given project.",
        "summary": "Get field values of a task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your task. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves field values of a task in the Main project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieve field values of a task in your project failed. Check if the project_id, account_id, or task_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you delete a specific task in your project.",
        "summary": "Delete task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully deletes a specific task in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "The request to delete a specific task in your project failed. Check if the project_id, task_id, or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/batch/list": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "Updates multiple tasks in a project from View.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of tasks updated in a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/batch/move": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you move tasks to a new state in any step.",
        "summary": "Add tasks to new state in any step",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project Flow ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMoveSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully moves multiple tasks to a different state of any step in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to move tasks to a new state in any step of your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/batch/assign": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you assign multiple tasks to a different user in the project.",
        "summary": "Change assignee for multiple tasks",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project flow. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully changes the assignee of multiple tasks in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to change assignee of your tasks in your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/batch/delete": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "Delete multiple tasks in a project from Flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to delete tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskIdList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully deletes a multiple specified task in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "The request to delete tasks failed. check your payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/view/{view_id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "Get all tasks for a given project view.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project flow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "description": "Unique ID generated for your project view",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "apply_preference",
            "description": "Boolean value to apply preference",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all cards created for the project view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TasksResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/workflow/{project_flow_id}/view/{view_id}": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you update field values of a task in the given project.",
        "summary": "Change form field values",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique project flow ID generated for your task. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique project view ID generated for you project. This is a mandatory parameter.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your task. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update a task in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTask"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the field values of a task in the given project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "The request to update the field values of a task in your project failed. Check if the project_id, account_id, or task_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/view/{view_id}/batch/move": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you move tasks to a new state in any step.",
        "summary": "Add tasks to new state in any step",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project Flow ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project View ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMoveSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully moves multiple tasks to a different state of any step in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to move tasks to a new state in any step of your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/view/{view_id}/batch/assign": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you assign multiple tasks to a different user in the project.",
        "summary": "Change assignee for multiple tasks",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique ID generated for your view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully changes the assignee of multiple tasks in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to change assignee of your tasks in your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/view/{view_id}/batch/list": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "Updates multiple tasks in a project from View.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique ID generated for your view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update or delete tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of tasks updated in a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/workflow/{project_flow_id}/view/{view_id}/batch/delete": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "Delete multiple tasks in a project from View.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique ID generated for your view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update or delete tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskIdList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully deletes a specific task in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/{project_flow_instance_id}/notes": {
      "post": {
        "deprecated": true,
        "tags": [
          "Projects"
        ],
        "description": "Create a note in project",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_flow_instance_id",
            "in": "path",
            "description": "Unique Project Flow Instance ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique Id for the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to Create a Note",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a note in Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "description": "Invalid note ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/fields": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Lists of all fields in the given project except child table fields if any.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_workflow",
            "in": "query",
            "description": "Boolean Value to include workflow fields.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All fields in the given project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Field"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project or Task ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/allfields": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Lists of all fields in the given project except child table fields if any.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_workflow",
            "in": "query",
            "description": "Boolean Value to include workflow fields.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All fields in the given project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Field"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project or Task ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/field/{field_id}/values": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get List Values of the field",
        "parameters": [
          {
            "name": "account_id",
            "description": "Unique account ID provided by Kissflow.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier assigned to each field of your project form. This is a mandatory parameter.",
            "required": true
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The search filter string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get List Values of the Field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid note ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you create a new task in your Kissflow project.",
        "summary": "Create a new task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to create a new task in a project.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTask"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request creates a new task and adds it to the Not Started step of the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "The request to create a new project in your account could not be executed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/items": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get all tasks for a given project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all cards created for the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TasksResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/myitems": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get tasks assigned to currently logged in user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page number of the task list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of tasks in a page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search string query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all tasks in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GridTasks"
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/tasks/archived": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get archived tasks",
        "description": "This endpoint retrieves all the archived tasks in the project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page number of the task list.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of tasks in a page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search query string",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all the archived tasks in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GridTasks"
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieve all the archived tasks in your project has failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/archive": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Archive a task",
        "description": "This endpoint lets you archive a specific task in your project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your <<glossary:Task>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request archives a specific task in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to archive a specific task in your project failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "The request to archive a specific task in your project failed as you do not have access to it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The request to archive a specific task in your project failed. Check if the project_id, task_id, or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/unarchive": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Unarchive a task",
        "description": "This endpoint lets you unarchive a specific task in your project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your <<glossary:Task>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request unarchives a specific task in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to unarchive a specific task in your project failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "The request to unarchive a specific task in your project failed as you do not have access to it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The request to unarchive a specific task in your project failed. Check if the project_id, task_id, or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/batch/update/list": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Updates multiple tasks in a project from View.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of tasks updated in a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/batch/move": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you move tasks to a new state in any step.",
        "summary": "Add tasks to new state in any step",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMoveSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully moves multiple tasks to a different state of any step in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to move tasks to a new state in any step of your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/batch/assign": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you assign multiple tasks to a different user in the project.",
        "summary": "Change assignee for multiple tasks",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully changes the assignee of multiple tasks in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to change assignee of your tasks in your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/batch/archive": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Archive multiple tasks",
        "description": "This endpoint lets you archive multiple tasks in a project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to archive tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchArchive"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request archives multiple tasks in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to archive multiple tasks failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The request to archive multiple tasks failed. Check your payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/batch/unarchive": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Unarchive multiple tasks",
        "description": "This endpoint lets you unarchive multiple tasks in a project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to unarchive tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUnarchive"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request unarchives multiple tasks in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to unarchive multiple tasks failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The request to unarchive multiple tasks failed. Check your payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/batch/delete": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Delete multiple tasks in a project from Flow.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to delete tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskIdList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully deletes a multiple specified task in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "The request to delete tasks failed. check your payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/view/{view_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get all tasks for a given project view.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "description": "Unique ID generated for your project view",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "apply_preference",
            "description": "Boolean value to apply preference",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all cards created for the project view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TasksResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/view/{view_id}/{task_id}": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you update field values of a task in the given project.",
        "summary": "Change form field values",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique project view ID generated for you project. This is a mandatory parameter.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID generated for your task. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update a task in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTask"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request updates the field values of a task in the given project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "The request to update the field values of a task in your project failed. Check if the project_id, account_id, or task_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/view/{view_id}/batch/move": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you move tasks to a new state in any step.",
        "summary": "Add tasks to new state in any step",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project View ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMoveSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully moves multiple tasks to a different state of any step in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to move tasks to a new state in any step of your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/view/{view_id}/batch/assign": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you assign multiple tasks to a different user in the project.",
        "summary": "Change assignee for multiple tasks",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique ID generated for your view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to reassign tasks in a project. Refer the syntax below.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchReassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully changes the assignee of multiple tasks in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to change assignee of your tasks in your project failed. Check if the project_id or account_id entered is correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/view/{view_id}/batch/update/list": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Updates multiple tasks in a project from View.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique ID generated for your view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update or delete tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of tasks updated in a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/view/{view_id}/batch/delete": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Delete multiple tasks in a project from View.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "path",
            "description": "Unique ID generated for your view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to update or delete tasks in a project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskIdList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully deletes a specific task in your project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid project ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/watch": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Watch a task",
        "description": "This endpoint allows a project member to watch a task in the Kissflow project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project\"s unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This payload will allow a project member to watch any task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Watcher"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The task was successfully added to the watchlist of the project member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "The task could not be watched since the project member does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "The request to watch a task in your project could not be completed. Check if the task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "409": {
            "description": "This task has already been added to your task watchlist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/unwatch": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Stop watching a task",
        "description": "This endpoint allows a project member to stop watching a task he\"s already following.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project\"s unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This payload will allow a project member to stop watching a task on their watchlist.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Watcher"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This task was successfully removed from the watching list of the project member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "The request to stop watching a task could not be completed. Check if the task watcher, task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/watched/tasks": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Get user\"s watched tasks",
        "description": "This endpoint allows a project member to get their watched tasks.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all my watched tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardWatcherDetails"
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieves all my watched tasks could not be completed. Check if the project_id or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you upload attachment files to a form field of your project task. You can add an attachment in the following file formats - .pdf, .doc, .ppt, .xls, .jpg, .jpeg, .jpe, .png, .gif, or .mp4.",
        "summary": "Add attachment to task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "The <<glossary:Project ID>> is the unique identifier for each project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "The <<glossary:Task ID>> is the unique identifier for each task inside a project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your project form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "This is the file that you upload.",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds new attachments to your project\"s form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/{field_id}/image": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you upload an image file to a form field of your project task. You can add an image in the following file formats - .jpg, .jpeg, .jpe, .png, or .gif.",
        "summary": "Add image to task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "The <<glossary:Project ID>> is the unique identifier for each project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "The <<glossary:Task ID>> is the unique identifier for each task inside a project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your project form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "This is the file that you upload.",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully adds a new image to your project\"s form field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint downloads an image file from a form field of your project task.",
        "summary": "Download image from task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "The <<glossary:Project ID>> is the unique identifier for each project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "The <<glossary:Task ID>> is the unique identifier for each task inside a project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your project form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an image from your project\"s form field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "This endpoint lets you download a specific attachment file from a form field of your project task.",
        "summary": "Download attachment from task",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "The <<glossary:Project ID>> is the unique identifier for each project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "The <<glossary:Task ID>> is the unique identifier for each task inside a project. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each field of your project form. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads a specific attachment from your project\"s form field.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/lookup": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Lookup data from other services",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID of a Project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Lookup aggregation intermediate datastruct",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "params": {
                    "type": "object",
                    "properties": {
                      "rhs_model": {
                        "type": "string"
                      },
                      "query_params": {
                        "type": "string"
                      }
                    }
                  },
                  "HideField": {
                    "type": "string"
                  },
                  "LookupField": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lookup data from other services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupResponseOfAInstance"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Lookup Data for a reference field in Parent model",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "ID of a project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID of the task lookedup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items_per_page",
            "in": "query",
            "description": "page size of response",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "page number of response",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field in Parent model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupResponseOfAInstance"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/{field_id}/rlookup": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Remote Data for a Remote Lookup field in Parent model",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "ID of a project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique ID of the task lookedup",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remote Data for a Remote Lookup field in Parent model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupResponseOfAInstance"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/lookup/fields": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "List all Fields in a Model Exclude Child",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "ID of a project whose field needed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all Fields in a Model Exclude Child",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/subtask/": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a new subtask",
        "description": "This endpoint lets you create a new subtask in your Kissflow project's task.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project's unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This payload creates a new subtask in your project's task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubtask"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This request creates a new subtask under the given task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtask"
                }
              }
            }
          },
          "404": {
            "description": "The request to create a new project in your account could not be executed. Check if the task_id or project_id or account_id entered are correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get all subtasks of a task",
        "description": "This endpoint lets you retrieve all subtasks of a specific task in your project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project's unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves all subtasks of a specific task.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subtask"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieve all subtasks in your task could not be executed. Check if the task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/subtask/{subtask_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a subtask of a task",
        "description": "This endpoint retrieves a specific subtask of a task in your project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project's unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subtask_id",
            "in": "path",
            "description": "Your task's unique <<glossary:Subtask ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves a specific subtask's details of a task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtask"
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieve a specific subtask of your task could not be executed. Check if the subtask_id, task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update subtask of a task",
        "description": "This endpoint updates the details of a specific subtask of your task in your project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project's unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subtask_id",
            "in": "path",
            "description": "Your task's unique <<glossary:Subtask ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This payload updates a specific subtask of a project task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubtask"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully updated a specific subtask of your task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtask"
                }
              }
            }
          },
          "404": {
            "description": "The request to update a specific subtask of your task failed to execute. Check if the subtask_id, task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a subtask of a task",
        "description": "This endpoint will delete a subtask of your task in your project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project's unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subtask_id",
            "in": "path",
            "description": "Your task's unique <<glossary:Subtask ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "This request returned an empty response."
          },
          "404": {
            "description": "The request to delete a subtask of your task failed to execute. Check if the subtask_id, task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/subtask/{subtask_id}/convert/task": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Convert a subtask to a task",
        "description": "This endpoint helps convert a subtask of your task in your project to another task.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project's unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subtask_id",
            "in": "path",
            "description": "Your task's unique <<glossary:Subtask ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves the new task created from your subtask.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "The request to create a new task from your subtask failed to execute. Check if the subtask_id, task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/notes": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Create a note in project",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique Id for the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload to Create a Note",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a note in Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "description": "Invalid note ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get all notes in a task in a project",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique Id for the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all notes in Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "description": "Invalid note ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/notes/{note_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get a note in a task in a project",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique Id for the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "Unique ID generated for note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a note in Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "description": "Invalid note ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "description": "Update a note in a task in a project",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique Id for the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "Unique ID generated for note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload for Update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a note in Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid note ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "description": "Delete a note in a task in a project",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique account ID provided by Kissflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Unique ID generated for your project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Unique Id for the task",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "Unique ID generated for note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a note in Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid note ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/{project_id}/{task_id}/activity/": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get the activities of a task or subtask",
        "description": "This endpoint lets you retrieve activities of a specific task or subtask in your project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Your unique Kissflow <<glossary:Project ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Your Kissflow Project's unique <<glossary:Task ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves activities of a specific task or subtask.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request to retrieve the activity of a specific task or subtask failed to execute. Check if the task_id, project_id, or account_id entered are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/mytasks/items/count": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get the exact count of tasks assigned to you in a project.",
        "summary": "Get the exact count of tasks assigned to you in a project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully listed the exact count of tasks assigned to you in a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTaskCount"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/project/2/{account_id}/mytasks/items": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Get the exact list of tasks assigned to you in a project.",
        "summary": "Get the exact list of tasks assigned to you in a project.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully listed the tasks assigned to you in a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTasks"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process-report/2/{account_id}/{process_id}/{report_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "View Chart report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique ID generated of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "view Chart report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Process ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process-report/2/{account_id}/{process_id}/{report_id}/count": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Count of report results",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique ID generated of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search query string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Process ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process-report/2/{account_id}/{process_id}/{report_id}/fields": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get report Fields",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique ID generated of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of fields selected for tabular Report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TabularReportFields"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Process ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process-report/2/{account_id}/{process_id}/{report_id}/aggregation": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Returns summary of whole report, all entries",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique ID generated of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be assigned any integer.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary result for each report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Returned when called for reports other than tabular report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Process ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process-report/2/{account_id}/tq": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSuccessResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process-report/2/{account_id}/{process_id}/{report_id}/export": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Export Report",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Unique ID provided for your kissflow account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process_id",
            "in": "path",
            "description": "Unique ID generated of the process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID generated for your report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "export type csv/json/pdf",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported report based on type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid Report or Process ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/process-report/2/{account_id}/{process_id}/{report_id}/{instance_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "description": "Get Item",
        "parameters": [
          {
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "process_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "report_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "instance_id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/api/verify": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get current user details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user  returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "202": {
            "description": "User Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you create a new user in Kissflow.",
        "summary": "Create a new user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip_email",
            "in": "query",
            "description": "Flag to skip sending email to the new user. This is an optional parameter.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for the Create user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This request creates a new user in Kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new user could not be processed due to a malformed request syntax. Check if you've entered the first name, phone number, and email in the body parameters fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "The request could not be processed as the user is already a part of the account or you don't have sufficient permission to perform this action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "get": {
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you retrieve all the active and invited users in the Kissflow account.",
        "summary": "Get user list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3 etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be 10, 25, 50, 100, etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string. This is an optional parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_type",
            "in": "query",
            "description": "<<glossary:User Type>> defines the permission of a specific user in Kissflow.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Billing Admin",
                "User Admin",
                "Super Admin"
              ]
            }
          },
          {
            "name": "invited_user",
            "in": "query",
            "description": "<<glossary:User Type>> defines Whether to Add the invited user in the API filter in Kissflow.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the list of all users based on the filter set by you.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultUser"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/count": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "This api for User management gird view this given user count based on user saved prf",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "description": "his api for User management gird view this given user count based on user saved prf",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Filter": {
                    "type": "object",
                    "properties": {
                      "OR": {
                        "type": "array",
                        "items": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "OR": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "LHSField": {
                                      "type": "string",
                                      "description": "field id exp (Email, Phone, Groups, etc., )"
                                    },
                                    "Operator": {
                                      "type": "string",
                                      "description": "Operator exp (CONTAINS, EQUAL_TO, NOT_EQUAL_TO, etc.,)"
                                    },
                                    "RHSType": {
                                      "type": "string",
                                      "description": "RHSType exp (Value, Field)"
                                    },
                                    "RHSValue": {
                                      "type": "string",
                                      "description": "value"
                                    },
                                    "RHSField": {
                                      "type": "string",
                                      "description": "RHSField field id (Email, Phone, Groups, etc., )"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/signin/2/{account_id}/portal/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Logout user from current device",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success status will receive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/signin/2/{account_id}/{user_id}/session/": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "description": "Delete all user session",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success status will receive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "User don't have permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/signin/2/{account_id}/{user_id}/session/{session_id}": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "description": "Logout the user from the give session",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "ID of session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success status will receive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "User don't have permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/signin/2/{account_id}/{user_id}/session": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Get User all user sessions",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number examples ( 1, 2, 3 ...)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "size per page examples (5, 10, 8 ...)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success status will receive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/signin/2/{account_id}/password/set": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "reset User password",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseUser"
                }
              }
            }
          },
          "400": {
            "description": "Invalid arguments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "User permission issues or token expires",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/signin/2/{account_id}/portal/password/forgot": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Get current user details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email send success message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "User Not Founded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/signin/2/{account_id}/": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Signin user with email and password",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "EmailId": {
                    "type": "string",
                    "format": "email"
                  },
                  "Password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email send success message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "Invalid params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "User Not Founded or Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{user_id}/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get user profile page details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get User profile page details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "description": "Update User Profile",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change summary of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/list": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "This api for User management gird view this given List of users based on user saved prf",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number examples ( 1, 2, 3 ...)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "size per page examples (5, 10, 8 ...)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGridList"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "description": "This api for User management gird view this given List of users based on user saved prf",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number examples ( 1, 2, 3 ...)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "size per page examples (5, 10, 8 ...)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Sort": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Id": {
                          "type": "string",
                          "description": "field id"
                        },
                        "Name": {
                          "type": "string",
                          "enum": [
                            "ASC",
                            "DESC"
                          ]
                        }
                      }
                    }
                  },
                  "Columns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Id": {
                          "type": "string",
                          "description": "field id"
                        }
                      }
                    }
                  },
                  "Filter": {
                    "type": "object",
                    "properties": {
                      "OR": {
                        "type": "array",
                        "items": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "OR": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "LHSField": {
                                      "type": "string",
                                      "description": "field id exp (Email, Phone, Groups, etc., )"
                                    },
                                    "Operator": {
                                      "type": "string",
                                      "description": "Operator exp (CONTAINS, EQUAL_TO, NOT_EQUAL_TO, etc.,)"
                                    },
                                    "RHSType": {
                                      "type": "string",
                                      "description": "RHSType exp (Value, Field)"
                                    },
                                    "RHSValue": {
                                      "type": "string",
                                      "description": "value"
                                    },
                                    "RHSField": {
                                      "type": "string",
                                      "description": "RHSField field id (Email, Phone, Groups, etc., )"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGridList"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/status/count": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "This api for admin tab user count by user status",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User counts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatusCount"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/fields": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "User field list",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User field list return",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserField"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/batch": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you perform bulk user actions like name and email change, user permission change, user deletions etc. in Kissflow.",
        "summary": "Bulk user actions",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchUpdateUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request performs bulk user actions like user name change, email change, deletion, suspension etc. successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseSchema"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The request to perform bulk user actions could not be processed as you don't have sufficient permission to do so.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/password/forcereset": {
      "post": {
        "deprecated": true,
        "tags": [
          "User"
        ],
        "description": "Batch reset password for users",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchUserResendSchema"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent for Resetting the password count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordResponseSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/deactivate": {
      "post": {
        "deprecated": true,
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you deactivate users in Kissflow.",
        "summary": "Deactivate user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request retrieves the list of deactivated users in Kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseSchema"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request to perform user deactivation could not be processed as you don't have sufficient permission to do so.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/activate": {
      "post": {
        "deprecated": true,
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you activate a user in Kissflow.",
        "summary": "Activate a new user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request retrieves a list of activated users in Kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseSchema"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/assignee": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get Assignee List user and Groups together",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number examples ( 1, 2, 3 ...)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "size per page examples (5, 10, 8 ...)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invited_user",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip_service_account",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignee list return",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignee"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{user_id}/profile/delegation": {
      "delete": {
        "tags": [
          "User"
        ],
        "description": "revoke user delegation",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Change summary of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/{group_id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "This endpoint lets you retrieve the details of individual members of a specific group.",
        "summary": "Get group details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Group ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully retrieves details about individual users of that group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "description": "This endpoint lets you delete a group in Kissflow.",
        "summary": "Delete a group",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Group ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully deletes a group from Kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/": {
      "post": {
        "tags": [
          "Group"
        ],
        "description": "This endpoint lets you create a new group in Kissflow.",
        "summary": "Create a new group",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This request creates a new group in Kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new group in Kissflow could not be processed due to a malformed request syntax. Make sure you've added the Name parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "The request to create a new group could not be processed as either the group is already present or you don't have sufficient permission to create one.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/count": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "group count expect system group for group page in admin",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/list": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "This endpoint retrieves the list of groups for a specific filter view.",
        "summary": "List groups by page",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be 10, 25, 50, 100, etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string. This is an optional parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves list of all groups based on a selected pagination view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseGroup"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "List groups by page",
        "description": "List Of groups For Admin Group management",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3, etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be 10, 25, 50, 100, etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string. This is an optional parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Sort": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Id": {
                          "type": "string",
                          "description": "field id"
                        },
                        "Name": {
                          "type": "string",
                          "enum": [
                            "ASC",
                            "DESC"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseGroup"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/{group_id}/members/count": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "This method use to get no of users from given group",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "ID of Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users count of given group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/{group_id}/members": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "This endpoint retrieves the user list of a given group for a specific filter view.",
        "summary": "Get group details by page",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Group ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "This is the specific page number of an item list. The page number can be specified as 1, 2, 3 etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of items that can be listed in a page. It can be 10, 25, 50, 100, etc. This is a mandatory parameter.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Specify the fields that are required in API response. You can specify multiple fields as comma separated values."
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves details about individual user records of that group based on a selected pagination view.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultUser"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/members": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Users list from list of group ids",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number examples ( 1, 2, 3 ...)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "size per page examples (5, 10, 8 ...)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invited_user",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetMembersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of Users in given groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultUser"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/api/": {
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Get User's api keys with pagination",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Page Number examples ( 1, 2, 3 ...)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "size per page examples (5, 10, 8 ...)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Api keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeysSchema"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Create new api key for the give user",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "description": "Api key name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success acknowledgement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/api/{api_key}": {
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Get api key detail",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key",
            "in": "path",
            "description": "api key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get api key detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeysSchema"
                }
              }
            }
          },
          "400": {
            "description": "Given api key is not in system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Update Api key Details, activate ans deactivate api keys",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key",
            "in": "path",
            "description": "updating ApiKeys",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "description": "Api key name"
                  },
                  "IsInActive": {
                    "type": "boolean",
                    "description": "Api key status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success acknowledgement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "Given api key is not in system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Delete the Api Key",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key",
            "in": "path",
            "description": "api key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success acknowledgement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{user_id}/profile/settings": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get User Settings",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get User Settings details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "description": "Update User Settings",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change summary of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/join": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Join this work place",
        "parameters": [
          {
            "name": "account_ id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinUserParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "400": {
            "description": "Email or Phone  and FirstName are mandatory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "If User already is system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{user_id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you retrieve the user details of a specific Kissflow user.",
        "summary": "Get user details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The unique <<glossary:User ID>> of a Kissflow user. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request retrieves the user details of a particular user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{user_id}/delegation": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get Delegated User",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/assignee/count": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get user and Groups together count",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invited_user",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignee list return",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{user_id}/{field_id}/attachment": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you upload attachment file to a field in your user table.",
        "summary": "Upload attachment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The unique <<glossary:User ID>> of a Kissflow user. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each column of a user table. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully uploads an attachment to a field in the user table.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{user_id}/{field_id}/attachment/{attachment_id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "This endpoint lets you download a specific attachment file from a field in your user table.",
        "summary": "Download attachment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "This is your Kissflow <<glossary:Account ID>>, and is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "The unique <<glossary:User ID>> of a Kissflow user. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "The unique identifier assigned to each column of a user table. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "This is the unique <<glossary:Attachment ID>> of your attached file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully downloads an attachment file from a field in your user management table.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/role/2/{account_id}/": {
      "post": {
        "tags": [
          "Role"
        ],
        "description": "This endpoint lets you Create Role with User and Group  in Kissflow.",
        "summary": "Create Role",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully create Role in kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/role/2/{account_id}/{role_id}": {
      "post": {
        "tags": [
          "Role"
        ],
        "description": "This endpoint lets you Update Role with User and Group in Kissflow.",
        "summary": "Update Role in Kissflow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Group ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully create Role in kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "description": "This endpoint lets you Delete Role with User and Group in Kissflow.",
        "summary": "Update Role in Kissflow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Group ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully Deleted Role in kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Role"
        ],
        "description": "This endpoint lets you Delete Role with User and Group in Kissflow.",
        "summary": "Get a Role in Kissflow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Group ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully Deleted Role in kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/role/2/{account_id}/list": {
      "get": {
        "tags": [
          "Role"
        ],
        "description": "This endpoint lets you Delete Role with User and Group in Kissflow.",
        "summary": "Get all Role in Kissflow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully Deleted Role in kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/role/2/{account_id}/count": {
      "get": {
        "tags": [
          "Role"
        ],
        "description": "This endpoint lets you Get Role count in Kissflow.",
        "summary": "Get the Role Count in Kissflow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This request successfully get the Count from  kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Count": {
                      "type": "number",
                      "description": "Number of Role available in the account or based on the application"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/role/2/{account_id}/batch": {
      "post": {
        "tags": [
          "Role"
        ],
        "description": "This Endpoint will let create or update role as batch in Kissflow.",
        "summary": "Batch Update Role in Kissflow",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request successfully Deleted Role in kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{model_id}/{user_id}": {},
    "/user/2/{account_id}/{model_id}/batch": {},
    "/user/2/{account_id}/me/": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get user profile page details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get User profile page details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserProfileSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "description": "Get user profile/settings page details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": null,
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfileSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get User profile page details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserProfileSettings"
                }
              }
            }
          },
          "403": {
            "description": "permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/me/password": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Get user profile/settings page details",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": null,
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfileSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get User profile page details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePassword"
                }
              }
            }
          },
          "403": {
            "description": "permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/me/set/password": {},
    "/user/2/{account_id}/resend": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Resend verification for users",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerificationSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success acknowledgement message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultStatus"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/email/batch/resend": {
      "post": {
        "deprecated": true,
        "tags": [
          "User"
        ],
        "description": "Batch Resend verification for users",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchUserResendSchema"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent for BatchResendVerification  count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResendResponseSchema"
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/me/avatar": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Update avatar",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": null,
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultUploadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update avatar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultUploadSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Specified Domain does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/{model_id}/{user_id}/{field_id}/lookup": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Lookup Data for a reference field",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model_id",
            "in": "path",
            "description": "ID of flow",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of Instance calls lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "ID of field needs lookup data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "page size of response",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "page number of response",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The search filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup Data for a reference field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupResponseOfAInstance"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/activate": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for UserActivation",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/deactivate": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for UserDeactivation",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/delete": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for Deletion",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/usertype": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for UserType",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/email/verification": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for EmailResendVerification",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/password/reset": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for ResetPassword",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/manager": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for Manager",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/twofactor/enrollment": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for TwoFactorEnrollment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/validate/custom/field": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Proactive validation for CustomField",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ProActive Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProactiveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/activate": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for UserActivation",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/deactivate": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for UserDeactivation",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/delete": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for UserDeletion",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/email/verification": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for EmailResendVerification",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/password/reset": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for ResetPassword",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigJsonSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/usertype": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for UserType",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/twofactor/enrollment": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for TwoFactorEnrollment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/manager": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for Manager",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/bulk/field/{field_id}": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for CustomField",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/bulk/member/add": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for Add user to group",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/group/2/{account_id}/bulk/member/remove": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Bulk Action for Remove user from group",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPayloadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BulkAction Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/serviceaccount/": {
      "post": {
        "tags": [
          "User",
          "ServiceAccount"
        ],
        "description": "This endpoint lets you create a new ServiceAccount in Kissflow.",
        "summary": "Create a new ServiceAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for the Create user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccountCreateUserParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This request creates a new service account in Kissflow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new user could not be processed due to a malformed request syntax. Check if you've entered the first name, phone number, and email in the body parameters fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "The request could not be processed as the user is already a part of the account or you don't have sufficient permission to perform this action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/serviceaccount/{sa_id}": {
      "delete": {
        "tags": [
          "User",
          "ServiceAccount"
        ],
        "description": "This endpoint lets you delete a ServiceAccount in Kissflow.",
        "summary": "delete a ServiceAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sa_id",
            "in": "path",
            "description": "Your ServiceAccount id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request deletes the mentioned service account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseSchema"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/serviceaccount/{sa_id}/member": {
      "post": {
        "tags": [
          "User",
          "ServiceAccount"
        ],
        "description": "This endpoint lets you Share user to the service account",
        "summary": "Share user to the service account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sa_id",
            "in": "path",
            "description": "Service Account ID. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for the Create user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "$ref": "#/components/schemas/ServiceAccountShareUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This request Share user to the service account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "$ref": "#/components/schemas/ServiceAccountShareUser"
                }
              }
            }
          },
          "400": {
            "description": "The request to create a new user could not be processed due to a malformed request syntax. Check if you've entered the first name, phone number, and email in the body parameters fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "The request could not be processed as the user is already a part of the account or you don't have sufficient permission to perform this action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/serviceaccount/{sa_id}/activate": {
      "post": {
        "tags": [
          "User",
          "ServiceAccount"
        ],
        "description": "This endpoint lets you activate a ServiceAccount in Kissflow.",
        "summary": "Activate a Service Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sa_id",
            "in": "path",
            "description": "Your ServiceAccount id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request activates the mentioned service account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseSchema"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    },
    "/user/2/{account_id}/serviceaccount/{sa_id}/deactivate": {
      "post": {
        "tags": [
          "User",
          "ServiceAccount"
        ],
        "description": "This endpoint lets you de-activate a ServiceAccount in Kissflow.",
        "summary": "de-activate a ServiceAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Your Kissflow <<glossary:Account ID>>. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sa_id",
            "in": "path",
            "description": "Your ServiceAccount id. This is a mandatory parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This request de-activates the mentioned service account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseSchema"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-Api-Key": []
          },
          {
            "X-Access-Key-Id": []
          },
          {
            "X-Access-Key-Secret": []
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "Everything about your Accounts",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Admin",
      "description": "Everything about your Admin",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "ApiKeys",
      "description": "Everything about your ApiKeys",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Application",
      "description": "All the API's related to Page Builder and components",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Appstore",
      "description": "Everything about your Appstore",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Audit",
      "description": "Audit all data changes in the application",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "AuditLog",
      "description": "Audit all data changes in the application",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Auth",
      "description": "Everything about your Authentication",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Case",
      "description": "Create and manage Case in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "CaseReport",
      "description": "View Reports",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Channel",
      "description": "Everything about  Channel",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Connectors",
      "description": "Everything about your Connectors",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Data Form",
      "description": "Create and manage Forms in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Data Form View",
      "description": "Manage FormView in Kissflow using these API endpoints",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Dataset",
      "description": "Retrieve your dataset's values or update multiple fields in your dataset using this API endpoint.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "DatasetView",
      "description": "API around DatasetView functionality",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Digitalhub",
      "description": "Create and manage your <<glossary:Digitalhub>> in your Kissflow account using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "DocumentParser",
      "description": "Analyse documents",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "EventSubscriber",
      "description": "Event Subscription service to Register Rest Hook with kissflow",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Flow",
      "description": "Create and manage flows in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "FormReport",
      "description": "Form Reports",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Global Item",
      "description": "Everything about your Global Item",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Group",
      "description": "Create and manage <<glossary:Groups>> in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Marketplace",
      "description": "Marketplace service APIs",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Metadata",
      "description": "Create and manage metadata of flows in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "My Items and My Tasks",
      "description": "Find the status of flow items initiated by you or items assigned to you by using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Portal",
      "description": "Everything about your Portal",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Post",
      "description": "Everything about  Post",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Process",
      "description": "Create and manage a <<glossary:Process>> in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "ProjectReport",
      "description": "Project metric & custom reports",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Projects",
      "description": "Create and manage your <<glossary:Projects>> in your Kissflow account using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Report",
      "description": "View Reports",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Role",
      "description": "Create and manage <<glossary:Role>> in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "Upload",
      "description": "Everything about your Upload",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "User",
      "description": "Create and manage users in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "analytics",
      "description": "Create and manage a <<glossary:analytics>> in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    },
    {
      "name": "analytics-sync",
      "description": "Create and manage a <<glossary:analytics>> in Kissflow using these API endpoints.",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://kissflow.com"
      }
    }
  ],
  "components": {
    "schemas": {
      "DefaultStatus": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "AuthType": {
        "type": "object",
        "properties": {
          "Kissflow": {
            "type": "string",
            "enum": [
              "Email"
            ]
          },
          "Azure": {
            "type": "boolean"
          },
          "SAML": {
            "type": "boolean"
          },
          "Google": {
            "type": "boolean"
          }
        }
      },
      "BaseAccount": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "AuthType": {
            "$ref": "#/components/schemas/AuthType"
          }
        },
        "required": [
          "_id"
        ]
      },
      "NewUser": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Account": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "BaseUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "FlowControlsSetting": {
        "type": "object",
        "properties": {
          "Download": {
            "type": "string"
          },
          "Print": {
            "type": "string"
          },
          "ApprovalRule": {
            "type": "string"
          },
          "Approvers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseUser"
            }
          }
        }
      },
      "FlowControl": {
        "type": "object",
        "properties": {
          "Project": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          },
          "Process": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          },
          "Channel": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          },
          "Case": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          }
        }
      },
      "Base": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "AssociateEmailDomain": {
        "type": "object",
        "properties": {
          "IsVerified": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "VerificationEmail": {
            "type": "string",
            "format": "email"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "VerificationEmail",
          "_id"
        ]
      },
      "AccountTheme": {
        "type": "object",
        "properties": {
          "ApplyBackground": {
            "type": "boolean"
          },
          "ColorCode": {
            "type": "string"
          }
        }
      },
      "Preference": {
        "type": "object",
        "properties": {
          "AccountTheme": {
            "$ref": "#/components/schemas/AccountTheme"
          }
        }
      },
      "SAMLSettings": {
        "type": "object",
        "properties": {
          "CreateUser": {
            "type": "boolean"
          },
          "SignOnUrl": {
            "type": "string",
            "format": "url"
          },
          "FingerPrint": {
            "type": "string"
          },
          "FieldId": {
            "type": "string"
          },
          "LogoutUrl": {
            "type": "string",
            "format": "url",
            "nullable": true
          }
        },
        "required": [
          "FieldId",
          "FingerPrint",
          "SignOnUrl"
        ]
      },
      "AuthSettings": {
        "type": "object",
        "properties": {
          "SAML": {
            "$ref": "#/components/schemas/SAMLSettings"
          }
        }
      },
      "Language": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "NativeName": {
            "type": "string"
          }
        },
        "required": [
          "Name"
        ]
      },
      "AccountDetail": {
        "type": "object",
        "properties": {
          "FlowControl": {
            "$ref": "#/components/schemas/FlowControl"
          },
          "SignupDisable": {
            "type": "boolean"
          },
          "TimeZone": {
            "$ref": "#/components/schemas/Base"
          },
          "AssociatedEmailDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociateEmailDomain"
            }
          },
          "Preference": {
            "$ref": "#/components/schemas/Preference"
          },
          "Name": {
            "type": "string"
          },
          "AuthType": {
            "$ref": "#/components/schemas/AuthType"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "AuthSettings": {
            "$ref": "#/components/schemas/AuthSettings"
          },
          "DateFormat": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "Endpoint": {
            "type": "string"
          },
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "Domain": {
            "type": "string"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "Owner": {
            "$ref": "#/components/schemas/BaseUser"
          }
        },
        "required": [
          "_id"
        ]
      },
      "FlowControlSchema": {
        "type": "object",
        "properties": {
          "Project": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          },
          "Process": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          },
          "Channel": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          },
          "Case": {
            "$ref": "#/components/schemas/FlowControlsSetting"
          }
        }
      },
      "SecurityRequestParams": {
        "type": "object",
        "properties": {
          "AuthSettings": {
            "$ref": "#/components/schemas/AuthSettings"
          },
          "SignupDisable": {
            "type": "boolean"
          },
          "AccessKeyExpireLimit": {
            "type": "integer",
            "nullable": true
          },
          "AuthType": {
            "$ref": "#/components/schemas/AuthType"
          }
        }
      },
      "SAMLSetting": {
        "type": "object",
        "properties": {
          "CreateUser": {
            "type": "boolean"
          },
          "SignOnUrl": {
            "type": "string",
            "format": "url"
          },
          "sp": {
            "type": "object"
          },
          "FingerPrint": {
            "type": "string"
          },
          "FieldId": {
            "type": "string"
          },
          "LogoutUrl": {
            "type": "string",
            "format": "url",
            "nullable": true
          }
        },
        "required": [
          "FieldId",
          "FingerPrint",
          "SignOnUrl"
        ]
      },
      "UpdateAccountParams": {
        "type": "object",
        "properties": {
          "TimeZone": {
            "$ref": "#/components/schemas/Base"
          },
          "Locale": {
            "$ref": "#/components/schemas/Base"
          },
          "Name": {
            "type": "string"
          },
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "Domain": {
            "type": "string"
          }
        }
      },
      "CardDetails": {
        "type": "object",
        "properties": {
          "CardType": {
            "type": "string"
          },
          "ExpiryYear": {
            "type": "string"
          },
          "ExpiryMonth": {
            "type": "string"
          },
          "CardStatus": {
            "type": "string"
          },
          "Last4": {
            "type": "string"
          }
        }
      },
      "BillingAddress": {
        "type": "object",
        "properties": {
          "State": {
            "type": "string"
          },
          "AddressLine1": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "AddressLine2": {
            "type": "string"
          },
          "TaxId": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "AddressLine3": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Zip": {
            "type": "string"
          }
        }
      },
      "CustomerDetailsSchema": {
        "type": "object",
        "properties": {
          "CardDetails": {
            "$ref": "#/components/schemas/CardDetails"
          },
          "AutoCollection": {
            "type": "boolean"
          },
          "IsSubscribed": {
            "type": "boolean"
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/BillingAddress"
          }
        }
      },
      "RedirectUrlSchema": {
        "type": "object",
        "properties": {
          "download_url": {
            "type": "string"
          }
        }
      },
      "BillingAddressSchema": {
        "type": "object",
        "properties": {
          "State": {
            "type": "string"
          },
          "AddressLine1": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "AddressLine2": {
            "type": "string"
          },
          "TaxId": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "AddressLine3": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Zip": {
            "type": "string"
          }
        }
      },
      "DefaultErrorSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "args": {
            "type": "object"
          },
          "error_code": {
            "type": "string"
          },
          "en_message": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "_id",
          "error_code"
        ]
      },
      "LowcodeConfigSchema": {
        "type": "object",
        "properties": {
          "ReleaseManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseUser"
            }
          }
        }
      },
      "ProviderPreference": {
        "type": "object",
        "properties": {
          "ConnectionType": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "ConferencePreference": {
        "type": "object",
        "properties": {
          "IsDeleted": {
            "type": "string"
          },
          "Active": {
            "type": "string"
          },
          "Provider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderPreference"
            }
          }
        }
      },
      "ChatPreferenceRequestParams": {
        "type": "object",
        "properties": {
          "Conference": {
            "$ref": "#/components/schemas/ConferencePreference"
          }
        }
      },
      "UpdateSandboxSubdomain": {
        "type": "object",
        "properties": {
          "SandboxName": {
            "type": "string"
          }
        }
      },
      "DefaultUploadSchema": {
        "type": "object",
        "properties": {
          "isProfile": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "isProfile",
          "name",
          "size"
        ]
      },
      "ImpersonatorSchema": {
        "type": "object",
        "properties": {
          "Impersonator": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "HolidaysParams": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "UpdateHolidaysParams": {
        "type": "object",
        "properties": {
          "WeekEnds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Holidays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HolidaysParams"
            }
          }
        }
      },
      "InvoiceDetails": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string"
          },
          "Id": {
            "type": "integer"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "BaseCurrencyCode": {
            "type": "string"
          }
        }
      },
      "DefaultResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "EventActor": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          }
        }
      },
      "Object": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          }
        }
      },
      "ListAccountLevelAudit": {
        "type": "object",
        "properties": {
          "EventActor": {
            "$ref": "#/components/schemas/EventActor"
          },
          "IPAddress": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Object": {
            "$ref": "#/components/schemas/Object"
          },
          "AuditId": {
            "type": "string"
          },
          "EventTime": {
            "type": "string",
            "format": "date-time"
          },
          "EventType": {
            "type": "string"
          },
          "EventCategory": {
            "type": "string"
          }
        }
      },
      "ListFlowLevelAudit": {
        "type": "object",
        "properties": {
          "EventActor": {
            "$ref": "#/components/schemas/EventActor"
          },
          "IPAddress": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Object": {
            "$ref": "#/components/schemas/Object"
          },
          "AuditId": {
            "type": "string"
          },
          "EventTime": {
            "type": "string",
            "format": "date-time"
          },
          "EventType": {
            "type": "string"
          },
          "EventCategory": {
            "type": "string"
          }
        }
      },
      "ListItemLevelAudit": {
        "type": "object",
        "properties": {
          "EventActor": {
            "$ref": "#/components/schemas/EventActor"
          },
          "IPAddress": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Object": {
            "$ref": "#/components/schemas/Object"
          },
          "AuditId": {
            "type": "string"
          },
          "EventTime": {
            "type": "string",
            "format": "date-time"
          },
          "EventType": {
            "type": "string"
          },
          "EventCategory": {
            "type": "string"
          }
        }
      },
      "AuditEventCount": {
        "type": "object",
        "properties": {
          "AuditEventCount": {
            "type": "number"
          }
        }
      },
      "AuditEventFieldValues": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocDetails": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          }
        }
      },
      "ModFieldsValue": {
        "type": "object",
        "properties": {
          "new_value": {
            "type": "string"
          },
          "old_value": {
            "type": "string"
          }
        }
      },
      "SystemValue": {
        "type": "object",
        "properties": {
          "n": {
            "type": "string"
          },
          "k": {
            "type": "string"
          },
          "i": {
            "type": "string"
          }
        }
      },
      "DocumentDelta": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "mod_fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ModFieldsValue"
            }
          },
          "_sv": {
            "$ref": "#/components/schemas/SystemValue"
          },
          "add": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DescribeAuditEvent": {
        "type": "object",
        "properties": {
          "_doc_version": {
            "type": "number"
          },
          "_doc": {
            "$ref": "#/components/schemas/DocDetails"
          },
          "RequestId": {
            "type": "string"
          },
          "DocDelta": {
            "$ref": "#/components/schemas/DocumentDelta"
          }
        }
      },
      "CreatedBy": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "ListAccountAudit": {
        "type": "object",
        "properties": {
          "_created_by": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "Actions": {
            "type": "string"
          },
          "_ResourceId": {
            "type": "string"
          },
          "IP": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "Category": {
            "type": "string"
          },
          "RelatedItems": {
            "type": "string"
          }
        }
      },
      "ListFlowAudit": {
        "type": "object",
        "properties": {
          "_created_by": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "Actions": {
            "type": "string"
          },
          "_ResourceId": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "RelatedItems": {
            "type": "string"
          }
        }
      },
      "ListUserAudit": {
        "type": "object",
        "properties": {
          "Actions": {
            "type": "string"
          },
          "_ResourceId": {
            "type": "string"
          },
          "IP": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "Category": {
            "type": "string"
          },
          "RelatedItems": {
            "type": "string"
          }
        }
      },
      "DefaultAuditStatus": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "AuditChangesDict": {
        "type": "object",
        "properties": {
          "CurrentValue": {
            "type": "string"
          },
          "OldValue": {
            "type": "string"
          }
        }
      },
      "AuditSummary": {
        "type": "object",
        "properties": {
          "_created_by": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "IP": {
            "type": "string"
          },
          "At": {
            "type": "string",
            "format": "date-time"
          },
          "Event": {
            "type": "string"
          }
        }
      },
      "DescribeAudit": {
        "type": "object",
        "properties": {
          "Changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditChangesDict"
            }
          },
          "Summary": {
            "$ref": "#/components/schemas/AuditSummary"
          }
        }
      },
      "AuditCount": {
        "type": "object",
        "properties": {
          "AuditCount": {
            "type": "number"
          }
        }
      },
      "Data": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultDict"
            }
          },
          "filter": {
            "$ref": "#/components/schemas/FilterFlowType"
          }
        }
      },
      "Field": {
        "type": "object",
        "properties": {
          "ReadOnly": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "width": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "Condition": {
        "type": "object",
        "properties": {
          "RHSField": {
            "type": "string"
          },
          "Label": {
            "type": "string"
          },
          "Operator": {
            "type": "string"
          },
          "RHSType": {
            "type": "string"
          },
          "LHSField": {
            "type": "string"
          }
        }
      },
      "Criteria": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string"
          },
          "condition": {
            "type": "object"
          },
          "criteria": {
            "type": "object"
          }
        }
      },
      "Sort": {
        "type": "object",
        "properties": {
          "SortType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "AggregationData": {
        "type": "object",
        "properties": {
          "COUNT_UNIQUE": {
            "type": "number"
          },
          "COUNT": {
            "type": "number"
          },
          "NONBLANK": {
            "type": "number"
          },
          "BLANK": {
            "type": "number"
          }
        }
      },
      "AggregationSchema": {
        "type": "object",
        "properties": {
          "field_id": {
            "type": "object"
          }
        }
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "Aggregation": {
            "type": "object"
          },
          "Colums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "Data": {
            "type": "object"
          },
          "Values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "Filters": {
            "type": "object"
          },
          "Rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          }
        }
      },
      "ReportCountResponse": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "number"
          }
        }
      },
      "TabularReportFields": {
        "type": "object",
        "properties": {
          "IsSystemField": {
            "type": "boolean"
          },
          "Type": {
            "type": "string"
          },
          "Label": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "RequestError": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          }
        }
      },
      "ReportSuccessResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "_created_by": {
            "type": "object"
          },
          "_id": {
            "type": "string"
          },
          "item_number": {
            "type": "string"
          }
        }
      },
      "UpdateDictOfInstance": {
        "type": "object",
        "properties": {
          "Summary": {
            "type": "string"
          }
        },
        "required": [
          "Summary"
        ]
      },
      "System": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "UpdateDictOfInstanceResponse": {
        "type": "object",
        "properties": {
          "_modified_by": {
            "$ref": "#/components/schemas/System"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "Summary": {
            "type": "string"
          }
        },
        "required": [
          "Summary"
        ]
      },
      "LookupResponseOfAInstance": {
        "type": "object",
        "properties": {
          "TotalPrice": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "RequestedBy": {
            "$ref": "#/components/schemas/System"
          },
          "PONumber": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "UpdateDictOfAInstance": {
        "type": "object",
        "properties": {
          "TotalPrice": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "PONumber": {
            "type": "string"
          },
          "RequestedBy": {
            "$ref": "#/components/schemas/System"
          }
        },
        "required": [
          "Name",
          "_id"
        ]
      },
      "BatchUpdate": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateDictOfAInstance"
            }
          }
        }
      },
      "GRIDDataResponse": {
        "type": "object",
        "properties": {
          "Table_TableName": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchUpdate"
            }
          },
          "Filter": {
            "type": "object"
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          }
        }
      },
      "MoveItemInstanceDict": {
        "type": "object",
        "properties": {
          "_status_id": {
            "type": "string"
          }
        },
        "required": [
          "_status_id"
        ]
      },
      "AssignItemInstanceDict": {
        "type": "object",
        "properties": {
          "AssignedTo": {
            "type": "object"
          }
        }
      },
      "ListValueofField": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "BatchMove": {
        "type": "object",
        "properties": {
          "_status_id": {
            "type": "string"
          },
          "item": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_status_id",
          "item"
        ]
      },
      "BatchAssign": {
        "type": "object",
        "properties": {
          "AssignedTo": {
            "type": "object"
          },
          "item": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "item"
        ]
      },
      "BatchResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "_failed_items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MultipleItem": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "item"
        ]
      },
      "BatchUpdatePriority": {
        "type": "object",
        "properties": {
          "_priority_id": {
            "type": "string"
          },
          "item": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_priority_id",
          "item"
        ]
      },
      "CreateItem": {
        "type": "object",
        "properties": {
          "DueDate": {
            "type": "string",
            "format": "date-time"
          },
          "_priority_id": {
            "type": "string"
          },
          "Requester": {
            "$ref": "#/components/schemas/System"
          },
          "AssignedTo": {
            "$ref": "#/components/schemas/System"
          },
          "_status_id": {
            "type": "string"
          }
        }
      },
      "StatusDefinition": {
        "type": "object",
        "properties": {
          "_status_name": {
            "type": "string"
          },
          "_category": {
            "type": "string"
          }
        }
      },
      "TransitionResponse": {
        "type": "object",
        "properties": {
          "_gross_time_projection": {
            "type": "string"
          },
          "_created_by": {
            "$ref": "#/components/schemas/System"
          },
          "_from": {
            "$ref": "#/components/schemas/StatusDefinition"
          },
          "GrossTime": {
            "type": "number"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "_to": {
            "$ref": "#/components/schemas/StatusDefinition"
          }
        }
      },
      "ActivityResponse": {
        "type": "object",
        "properties": {
          "_visibility_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_event_field": {
            "type": "string"
          },
          "_status_instance_id": {
            "type": "string"
          },
          "_status_id": {
            "type": "string"
          },
          "_status_name": {
            "type": "string"
          },
          "_created_by": {
            "$ref": "#/components/schemas/System"
          },
          "_event_type": {
            "type": "string"
          },
          "_change_summary": {
            "type": "object"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetItem": {
        "type": "object",
        "properties": {
          "_current_assigned_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System"
            }
          },
          "_progress": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "_current_step": {
            "type": "string"
          }
        }
      },
      "PriorityUpdateDict": {
        "type": "object",
        "properties": {
          "_priority_id": {
            "type": "string"
          }
        }
      },
      "RequesterUpdateDict": {
        "type": "object",
        "properties": {
          "Requester": {
            "type": "object"
          }
        }
      },
      "DueDateUpdateDict": {
        "type": "object",
        "properties": {
          "DueDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NotesBody": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "NotesRequest": {
        "type": "object",
        "properties": {
          "AtMentions": {
            "type": "object"
          },
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotesBody"
            }
          }
        }
      },
      "NotesListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotesRequest"
            }
          }
        }
      },
      "FilterColumns": {
        "type": "object",
        "properties": {
          "ReadOnly": {
            "type": "string"
          },
          "Model": {
            "type": "string"
          },
          "IsSystemField": {
            "type": "boolean"
          },
          "Type": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Required": {
            "type": "boolean"
          },
          "Id": {
            "type": "string"
          },
          "Fixed": {
            "type": "boolean"
          },
          "Widget": {
            "type": "string"
          },
          "Width": {
            "type": "number"
          }
        }
      },
      "FilterStructure": {
        "type": "object",
        "properties": {
          "RHSType": {
            "type": "string"
          },
          "LHSField": {
            "type": "string"
          },
          "RHSValue": {
            "type": "string"
          },
          "RHSAttribute": {
            "type": "string"
          },
          "Operator": {
            "type": "string"
          },
          "RHSField": {
            "type": "string"
          }
        }
      },
      "ORCondition": {
        "type": "object",
        "properties": {
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterStructure"
            }
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "AND": {
            "$ref": "#/components/schemas/_Filter"
          },
          "OR": {
            "$ref": "#/components/schemas/_Filter"
          }
        }
      },
      "SortStructure": {
        "type": "object",
        "properties": {
          "SortType": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "FilterConfigJson": {
        "type": "object",
        "properties": {
          "FilterType": {
            "type": "string"
          },
          "PageSize": {
            "type": "number"
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterColumns"
            }
          },
          "Filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortStructure"
            }
          }
        }
      },
      "CreateFilter": {
        "type": "object",
        "properties": {
          "ViewType": {
            "type": "string"
          },
          "AppId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ViewId": {
            "type": "string"
          },
          "ConfigJson": {
            "$ref": "#/components/schemas/FilterConfigJson"
          }
        }
      },
      "ListItemResponse": {
        "type": "object",
        "properties": {
          "FilterType": {
            "type": "string"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetItem"
            }
          },
          "PageSize": {
            "type": "number"
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterColumns"
            }
          },
          "Filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortStructure"
            }
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "WatchersRequest": {
        "type": "object",
        "properties": {
          "_watchers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System"
            }
          }
        }
      },
      "CountResponse": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "number"
          }
        }
      },
      "UpdateDictOfInstanceIntegration": {
        "type": "object",
        "properties": {
          "DueDate": {
            "type": "string",
            "format": "date-time"
          },
          "_priority_id": {
            "type": "string"
          },
          "Requester": {
            "type": "object"
          },
          "AssignedTo": {
            "type": "object"
          },
          "Product_Name": {
            "type": "string"
          },
          "Product_Number": {
            "type": "number"
          },
          "_status_id": {
            "type": "string"
          },
          "Purchased_Date": {
            "type": "string",
            "format": "date-time"
          },
          "Summary": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Bill_Number": {
            "type": "number"
          }
        },
        "required": [
          "Summary"
        ]
      },
      "UpdateDictOfInstanceIntegrationResponse": {
        "type": "object",
        "properties": {
          "_modified_by": {
            "$ref": "#/components/schemas/System"
          },
          "DueDate": {
            "type": "string",
            "format": "date-time"
          },
          "_priority_id": {
            "type": "string"
          },
          "Requester": {
            "type": "object"
          },
          "AssignedTo": {
            "type": "object"
          },
          "Product_Name": {
            "type": "string"
          },
          "Product_Number": {
            "type": "number"
          },
          "_status_id": {
            "type": "string"
          },
          "Purchased_Date": {
            "type": "string",
            "format": "date-time"
          },
          "Summary": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "Bill_Number": {
            "type": "number"
          }
        },
        "required": [
          "Summary"
        ]
      },
      "ChannelCreationRequestParams": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "ChannelCreationResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "_created_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "ChannelUpdationRequestParams": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ChannelMembers": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "_modifed_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          },
          "Permission": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetChannelInfo": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "_created_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "_modified_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "Subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelMembers"
            }
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChannelUserDetail": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "PostNodeLeaves": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "marks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "object": {
            "type": "string"
          }
        }
      },
      "PostNodesNode": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "leaves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostNodeLeaves"
            }
          }
        }
      },
      "PostNodes": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostNodesNode"
            }
          },
          "data": {
            "type": "object"
          },
          "object": {
            "type": "string"
          },
          "isVoid": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PostDocument": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostNodes"
            }
          },
          "data": {
            "type": "object"
          },
          "object": {
            "type": "string"
          }
        }
      },
      "PostContent": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/PostDocument"
          },
          "object": {
            "type": "string"
          }
        }
      },
      "PostDetail": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "_created_by": {
            "$ref": "#/components/schemas/ChannelUserDetail"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/ChannelUserDetail"
          },
          "IsPinned": {
            "type": "boolean"
          },
          "Content": {
            "$ref": "#/components/schemas/PostContent"
          },
          "Name": {
            "type": "string"
          },
          "IsComment": {
            "type": "boolean"
          },
          "AssignedTo": {
            "$ref": "#/components/schemas/ChannelUserDetail"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "SeenCount": {
            "type": "integer"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "_id"
        ]
      },
      "ChannelPosts": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostDetail"
            }
          }
        }
      },
      "ChannelAnnouncement": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostDetail"
            }
          }
        }
      },
      "PollVoterDetail": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "PollOption": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollVoterDetail"
            }
          },
          "_created_by": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PostPoll": {
        "type": "object",
        "properties": {
          "anonymous": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "option": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollOption"
            }
          },
          "settings": {
            "type": "object"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "PollPostDetail": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "_created_by": {
            "$ref": "#/components/schemas/ChannelUserDetail"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/ChannelUserDetail"
          },
          "IsPinned": {
            "type": "boolean"
          },
          "Content": {
            "$ref": "#/components/schemas/PostContent"
          },
          "Polls": {
            "$ref": "#/components/schemas/PostPoll"
          },
          "Name": {
            "type": "string"
          },
          "IsComment": {
            "type": "boolean"
          },
          "AssignedTo": {
            "$ref": "#/components/schemas/ChannelUserDetail"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "_id"
        ]
      },
      "PollVote": {
        "type": "object",
        "properties": {
          "User": {
            "$ref": "#/components/schemas/PollVoterDetail"
          }
        }
      },
      "PollOptionAddition": {
        "type": "object",
        "properties": {
          "option_id": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PollOption"
          }
        },
        "required": [
          "option_id"
        ]
      },
      "UpdatePollOption": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PollSetting": {
        "type": "object",
        "properties": {
          "User": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollVoterDetail"
            }
          },
          "anonymous": {
            "type": "boolean"
          },
          "ChannelId": {
            "type": "string"
          }
        }
      },
      "UpdatePostContent": {
        "type": "object",
        "properties": {
          "IsPinned": {
            "type": "boolean"
          },
          "Content": {
            "$ref": "#/components/schemas/PostContent"
          },
          "Polls": {
            "$ref": "#/components/schemas/PostPoll"
          },
          "IsComment": {
            "type": "boolean"
          }
        }
      },
      "PostCreation": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/PostContent"
          },
          "Polls": {
            "$ref": "#/components/schemas/PostPoll"
          }
        }
      },
      "_Filter": {
        "type": "object",
        "properties": {
          "OPERATOR": {
            "type": "string"
          },
          "RHS_TYPE": {
            "type": "string"
          },
          "OPERATOR_LABEL": {
            "type": "string"
          },
          "RHS_FIELD": {
            "type": "string"
          },
          "LABEL": {
            "type": "string"
          },
          "RHS_VALUE": {
            "type": "string"
          },
          "LHS_FIELD": {
            "type": "string"
          }
        },
        "required": [
          "LHS_FIELD",
          "OPERATOR",
          "RHS_TYPE"
        ]
      },
      "GlobalItem": {
        "type": "object",
        "properties": {
          "_current_step": {
            "type": "string"
          },
          "FlowId": {
            "type": "string"
          },
          "_created_at": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_activity_instance_id": {
            "type": "string"
          },
          "AssignedTo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseUser"
            }
          },
          "FlowName": {
            "type": "string"
          },
          "_status": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "FlowType": {
            "type": "string"
          },
          "_completed_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "FlowId",
          "FlowName",
          "FlowType",
          "Name",
          "_id",
          "_status"
        ]
      },
      "GlobalItemListResponse": {
        "type": "object",
        "properties": {
          "Columns": {
            "$ref": "#/components/schemas/Field"
          },
          "Filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "Sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "ID": {
            "type": "string"
          },
          "PageSize": {
            "type": "number"
          },
          "Data": {
            "$ref": "#/components/schemas/GlobalItem"
          }
        }
      },
      "TaskCount": {
        "type": "object",
        "properties": {
          "InProgress": {
            "type": "integer"
          },
          "Completed": {
            "type": "integer"
          },
          "Withdrawn": {
            "type": "integer"
          },
          "Rejected": {
            "type": "integer"
          },
          "Draft": {
            "type": "integer"
          }
        }
      },
      "Count": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          }
        }
      },
      "LookupResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookupResponseOfAInstance"
            }
          }
        }
      },
      "UpdateDictOfAInstanceResponse": {
        "type": "object",
        "properties": {
          "_modified_by": {
            "$ref": "#/components/schemas/System"
          },
          "TotalPrice": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "PONumber": {
            "type": "string"
          },
          "RequestedBy": {
            "$ref": "#/components/schemas/System"
          }
        },
        "required": [
          "Name",
          "_id"
        ]
      },
      "BatchUpdateResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateDictOfAInstanceResponse"
            }
          }
        }
      },
      "ViewCreateResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string"
          }
        }
      },
      "QueryDefinitionIntermediateDataStructure": {
        "type": "object",
        "properties": {}
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "type"
        ]
      },
      "AnalysePayload": {
        "type": "object",
        "properties": {
          "InstanceId": {
            "type": "string"
          },
          "_flow_id": {
            "type": "string"
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "Labels": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "_flow_type": {
            "type": "string"
          },
          "ChildLabels": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "ChildLabels",
          "Files",
          "InstanceId",
          "Labels",
          "_flow_id",
          "_flow_type"
        ]
      },
      "AnalysisResultsResponse": {
        "type": "object",
        "properties": {}
      },
      "SimSortPayload": {
        "type": "object",
        "properties": {
          "ChildLabels": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "Labels": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "ChildLabels",
          "Labels"
        ]
      },
      "EventSubscriptionRequestSchema": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "FlowId": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "Request": {
            "type": "object"
          },
          "FlowType": {
            "type": "string"
          },
          "Filter": {
            "type": "string"
          }
        },
        "required": [
          "EventType",
          "FlowId",
          "FlowType",
          "Name",
          "Request"
        ]
      },
      "EventSubscriptionSchema": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "FlowId": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "Request": {
            "type": "object"
          },
          "Type": {
            "type": "string"
          },
          "FlowType": {
            "type": "string"
          },
          "Filter": {
            "type": "string"
          }
        },
        "required": [
          "EventType",
          "FlowId",
          "FlowType",
          "Name",
          "Request",
          "Status",
          "Type",
          "_id"
        ]
      },
      "ExplorerJson": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/User"
          },
          "ChildTables": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "ExplorerResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerJson"
            }
          }
        }
      },
      "MDSuccessfulSaveResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "MDLookupResponse": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Will be one of Process / Dataset / DatasetView"
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Unique id of the account"
          }
        }
      },
      "MDReferredResource": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "res": {
        "type": "object",
        "properties": {
          "ReferredIn": {
            "type": "string"
          },
          "ReferredRootModel": {
            "type": "string"
          },
          "ReferredModel": {
            "type": "string"
          },
          "ReferredResourceId": {
            "$ref": "#/components/schemas/MDReferredResource"
          }
        }
      },
      "DependencyResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/res"
            }
          }
        }
      },
      "FlowCreateResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        }
      },
      "FlowCreateModelDict": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "FlowCreateSuccessResponse": {
        "type": "object",
        "properties": {
          "model": {
            "$ref": "#/components/schemas/FlowCreateModelDict"
          },
          "msg": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        }
      },
      "FlowCreatePayload": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "MDResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        }
      },
      "MDRawChannelMeta": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Should be one of Secret / Closed / Open"
          },
          "IsDelete": {
            "type": "boolean"
          },
          "_created_at": {
            "type": "string"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/User"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Settings": {
        "type": "object",
        "properties": {
          "Permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DatasetSettings": {
        "type": "object",
        "properties": {
          "Permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base"
            }
          }
        }
      },
      "ListMeta": {
        "type": "object",
        "properties": {
          "ReferredIn": {
            "description": "Contains a list of models in which this List is used",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base"
            }
          },
          "Name": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string",
            "description": "Could be one of Live / Deleted"
          },
          "Categories": {
            "type": "array",
            "description": "Contains the categories with which this List is tagged",
            "items": {
              "type": "string"
            }
          },
          "SampleItems": {
            "type": "array",
            "description": "Contains four items from the List",
            "items": {
              "type": "string"
            }
          },
          "_created_by": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "ListResponse": {
        "type": "object",
        "properties": {
          "ListResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListMeta"
            }
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "ListIntegrationsResponse": {
        "type": "object",
        "properties": {
          "Trigger": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "ChildTables": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "ExecutedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutedCount": {
            "type": "integer"
          }
        }
      },
      "ActivityDependency": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Trigger": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "IntegrationActivityDependency": {
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityDependency"
            }
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "ListReportsResponse": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/User"
          },
          "ChildTables": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "IsAllItemsReport": {
            "type": "string"
          },
          "ViewType": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "ChildTableCount": {
            "type": "integer"
          },
          "Permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "ReportSettings": {
        "type": "object",
        "properties": {
          "Permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BasicInfo": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_created_by": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "FieldDependencyPayload": {
        "type": "object",
        "properties": {
          "FieldList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChannelSettings": {
        "type": "object",
        "properties": {
          "Visibility": {
            "type": "string"
          },
          "AnonymousPost": {
            "type": "string"
          }
        }
      },
      "UserAndGroupSchema": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "StreamSettingsPayload": {
        "type": "object",
        "properties": {
          "PostAnonymous": {
            "type": "boolean"
          }
        }
      },
      "DuplicatePayload": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "AllowedFields": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "IsProtected": {
            "type": "boolean"
          },
          "_id": {
            "type": "string"
          },
          "IsHidden": {
            "type": "boolean"
          },
          "Permission": {
            "type": "string",
            "description": "Should be ReadOnly or Editable"
          }
        }
      },
      "AllowedFlows": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Could be Process or Dataset or DatasetView or Case or Project"
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "Security": {
        "type": "object",
        "properties": {
          "AllowAllFields": {
            "type": "boolean"
          },
          "AllowAllFlows": {
            "type": "boolean"
          },
          "AllowedFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowedFields"
            }
          },
          "AllowedFlows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowedFlows"
            }
          }
        }
      },
      "MDFailedSaveResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Permission": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ListMetricsResponse": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/User"
          },
          "ChildTables": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "MetricType": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "ViewType": {
            "type": "string"
          },
          "Permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/User"
          },
          "MetricSubtype": {
            "type": "string"
          }
        }
      },
      "DuplicationResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "UpdateUserLicense": {
        "type": "object",
        "properties": {
          "UserLicenses": {
            "type": "integer"
          }
        },
        "required": [
          "UserLicenses"
        ]
      },
      "BatchComplete": {
        "type": "object",
        "properties": {}
      },
      "Reassign": {
        "type": "object",
        "properties": {
          "Note": {
            "type": "string"
          },
          "ReassignedFrom": {
            "$ref": "#/components/schemas/System"
          },
          "ReassignedTo": {
            "$ref": "#/components/schemas/System"
          }
        }
      },
      "Step": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          }
        }
      },
      "PendingItems": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Step"
            }
          },
          "CardFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          }
        }
      },
      "AdminTaskCount": {
        "type": "object",
        "properties": {
          "Deactivated": {
            "type": "integer"
          },
          "InProgress": {
            "type": "integer"
          },
          "Completed": {
            "type": "integer"
          },
          "Withdrawn": {
            "type": "integer"
          },
          "Rejected": {
            "type": "integer"
          }
        }
      },
      "Aggregations": {
        "type": "object",
        "properties": {
          "SUM": {
            "type": "integer"
          },
          "MIN": {
            "type": "string",
            "format": "date-time"
          },
          "BLANK": {
            "type": "integer"
          },
          "MAX": {
            "type": "string",
            "format": "date-time"
          },
          "COUNT": {
            "type": "integer"
          },
          "NONBLANK": {
            "type": "integer"
          }
        }
      },
      "AggregationDict": {
        "type": "object",
        "properties": {
          "_created_at": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Aggregations"
            }
          },
          "_progress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Aggregations"
            }
          },
          "Name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Aggregations"
            }
          },
          "_current_step": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Aggregations"
            }
          }
        }
      },
      "PendingTaskCount": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Count": {
            "type": "integer"
          },
          "StepName": {
            "type": "string"
          }
        }
      },
      "SubmitResponse": {
        "type": "object",
        "properties": {
          "InstanceId": {
            "type": "string"
          },
          "ActivityInstanceId": {
            "type": "string"
          }
        }
      },
      "Process": {
        "type": "object",
        "properties": {
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Step"
            }
          }
        }
      },
      "SendBackStep": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_activity_id": {
            "type": "string"
          }
        }
      },
      "SendBackPath": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "SendBackPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendBackStep"
            }
          },
          "Name": {
            "type": "string"
          },
          "_activity_id": {
            "type": "string"
          }
        }
      },
      "SendBack": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Note": {
            "type": "string"
          },
          "_activity_id": {
            "type": "string"
          }
        }
      },
      "MetricData": {
        "type": "object",
        "properties": {
          "FieldId": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "MetricField": {
        "type": "object",
        "properties": {
          "TableModelId": {
            "type": "string"
          },
          "IsGeneratedField": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "AggregationFunction": {
            "type": "string"
          },
          "ProjectionFunction": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "required": [
          "Id",
          "Name",
          "Type"
        ]
      },
      "FilterDict": {
        "type": "object",
        "properties": {
          "RHSType": {
            "type": "string"
          },
          "LHSField": {
            "type": "string"
          },
          "Operator": {
            "type": "string"
          },
          "RHSValue": {
            "type": "string"
          }
        },
        "required": [
          "LHSField",
          "Operator",
          "RHSType"
        ]
      },
      "MetricResponse": {
        "type": "object",
        "properties": {
          "Rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricField"
            }
          },
          "Values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricField"
            }
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricField"
            }
          },
          "Filter": {
            "type": "object",
            "nullable": true
          },
          "Name": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Appearance": {
            "type": "object",
            "nullable": true
          },
          "Duration": {
            "type": "object"
          },
          "ColumnValues": {
            "type": "object",
            "nullable": true
          },
          "Data": {
            "type": "object"
          }
        },
        "required": [
          "Columns",
          "Data",
          "Id",
          "Name",
          "Values"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "CreateTask": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_previous_step_id": {
            "type": "string"
          },
          "_current_state_name": {
            "type": "string"
          },
          "_status": {
            "type": "string"
          },
          "_current_state_id": {
            "type": "string"
          },
          "_current_step_name": {
            "type": "string"
          },
          "_current_step_id": {
            "type": "string"
          },
          "_previous_state_id": {
            "type": "string"
          }
        }
      },
      "TaskBase": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "TaskIdList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskBase"
              }
            }
          }
        }
      },
      "GridTasks": {
        "type": "object",
        "properties": {
          "Aggregation": {
            "type": "object"
          },
          "Visualization": {
            "type": "object"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "PageSize": {
            "type": "number"
          },
          "Filter": {
            "type": "object"
          },
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          }
        }
      },
      "FieldDict": {
        "type": "object",
        "properties": {
          "Widget": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Model": {
            "type": "string"
          },
          "IsSystemField": {
            "type": "boolean"
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "TasksResponse": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDict"
            }
          },
          "Position": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          }
        }
      },
      "BatchTasks": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          }
        }
      },
      "BatchSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchTasks"
            }
          },
          "fields": {
            "type": "object"
          }
        }
      },
      "StepStateSchema": {
        "type": "object",
        "properties": {
          "_step": {
            "type": "string"
          },
          "_state": {
            "type": "string"
          }
        }
      },
      "BatchMoveSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchTasks"
            }
          },
          "fields": {
            "$ref": "#/components/schemas/StepStateSchema"
          }
        }
      },
      "UserFieldSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          }
        }
      },
      "AssignedToSchema": {
        "type": "object",
        "properties": {
          "AssignedTo": {
            "$ref": "#/components/schemas/UserFieldSchema"
          }
        }
      },
      "BatchReassign": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchTasks"
            }
          },
          "fields": {
            "$ref": "#/components/schemas/AssignedToSchema"
          }
        }
      },
      "TitleArgs": {
        "type": "object",
        "properties": {
          "Args": {
            "$ref": "#/components/schemas/TitleArgs"
          },
          "ActedBy": {
            "$ref": "#/components/schemas/UserFieldSchema"
          }
        }
      },
      "Title": {
        "type": "object",
        "properties": {
          "Args": {
            "$ref": "#/components/schemas/Title"
          },
          "Title": {
            "$ref": "#/components/schemas/Title"
          },
          "message": {
            "type": "string"
          },
          "ActedBy": {
            "$ref": "#/components/schemas/UserFieldSchema"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "Args": {
            "$ref": "#/components/schemas/Activity"
          },
          "message": {
            "type": "string"
          },
          "StepName": {
            "type": "string"
          },
          "StateId": {
            "type": "string"
          },
          "ActedBy": {
            "$ref": "#/components/schemas/UserFieldSchema"
          },
          "Action": {
            "type": "string"
          },
          "ActionStartedAt": {
            "type": "string"
          },
          "PreviousStepId": {
            "type": "string"
          },
          "StepId": {
            "type": "string"
          },
          "StateName": {
            "type": "string"
          },
          "PreviousStateId": {
            "type": "string"
          },
          "UnAssignedFrom": {
            "$ref": "#/components/schemas/UserFieldSchema"
          },
          "PreviousStep": {
            "type": "string"
          },
          "Title": {
            "$ref": "#/components/schemas/Activity"
          },
          "PreviousState": {
            "type": "string"
          },
          "AssignedTo": {
            "$ref": "#/components/schemas/UserFieldSchema"
          }
        }
      },
      "CreateNote": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Attachment": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AtMentions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_flow_type": {
            "type": "string"
          },
          "_created_at": {
            "type": "string"
          },
          "_modified_at": {
            "type": "string"
          },
          "Content": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_modified_by": {
            "type": "string"
          },
          "Attachment": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AtMentions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_created_by": {
            "type": "string"
          }
        }
      },
      "UserTaskCount": {
        "type": "object",
        "properties": {
          "ProjectName": {
            "type": "string"
          },
          "ProjectId": {
            "type": "string"
          },
          "Count": {
            "type": "number"
          }
        },
        "required": [
          "Count",
          "ProjectId",
          "ProjectName"
        ]
      },
      "UserTask": {
        "type": "object",
        "properties": {
          "ProjectId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "StepName": {
            "type": "string"
          },
          "ItemId": {
            "type": "string"
          },
          "ProjectName": {
            "type": "string"
          },
          "StateName": {
            "type": "string",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "required": [
          "DueDate",
          "ItemId",
          "Name",
          "ProjectId",
          "ProjectName",
          "StateName",
          "StepName"
        ]
      },
      "UserTasks": {
        "type": "object",
        "properties": {
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTask"
            }
          }
        },
        "required": [
          "Columns",
          "Data"
        ]
      },
      "CreateSubtask": {
        "type": "object",
        "properties": {
          "_status": {
            "type": "string",
            "nullable": true
          },
          "_position": {
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "AssignedTo": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFieldSchema"
              }
            ]
          },
          "DueDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "required": [
          "Title",
          "_position"
        ]
      },
      "Subtask": {
        "type": "object",
        "properties": {
          "_status": {
            "type": "string"
          },
          "_position": {
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "AssignedTo": {
            "$ref": "#/components/schemas/UserFieldSchema"
          },
          "DueDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "Title",
          "_position",
          "_status"
        ]
      },
      "UpdateSubtask": {
        "type": "object",
        "properties": {
          "_status": {
            "type": "string"
          },
          "_position": {
            "type": "integer"
          },
          "Title": {
            "type": "string"
          },
          "AssignedTo": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFieldSchema"
              }
            ]
          },
          "DueDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "required": [
          "_position"
        ]
      },
      "Watcher": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          }
        },
        "required": [
          "Kind",
          "Name",
          "_id"
        ]
      },
      "StepWatchers": {
        "type": "object",
        "properties": {
          "_is_watched": {
            "type": "boolean"
          },
          "Watcher": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFieldSchema"
            }
          }
        },
        "required": [
          "_is_watched"
        ]
      },
      "BoardWatcherDetails": {
        "type": "object",
        "properties": {
          "StepWatchers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StepWatchers"
            }
          },
          "WatchedTasks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "StepWatchers",
          "WatchedTasks"
        ]
      },
      "BatchArchive": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/TaskBase"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "BatchUnarchive": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/TaskBase"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "MyItemsCount": {
        "type": "object",
        "properties": {
          "InProgress": {
            "type": "integer"
          },
          "Draft": {
            "type": "integer"
          },
          "Completed": {
            "type": "integer"
          }
        }
      },
      "MyPendingCount": {
        "type": "object",
        "properties": {
          "InProgress": {
            "type": "integer"
          }
        }
      },
      "MyPendingItems": {
        "type": "object",
        "properties": {
          "_status": {
            "type": "string"
          },
          "FlowName": {
            "type": "string"
          },
          "ItemTitle": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "StepName": {
            "type": "string"
          },
          "_activity_instance_id": {
            "type": "string"
          },
          "FlowId": {
            "type": "string"
          },
          "_activity_id": {
            "type": "string"
          },
          "ExpectedAt": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "MyDraftItems": {
        "type": "object",
        "properties": {
          "FlowName": {
            "type": "string"
          },
          "ItemTitle": {
            "type": "string"
          },
          "_activity_instance_id": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "FlowId": {
            "type": "string"
          },
          "_activity_id": {
            "type": "string"
          }
        }
      },
      "SearchResultDict": {
        "type": "object",
        "properties": {
          "InstanceId": {
            "type": "string"
          },
          "FlowId": {
            "type": "string"
          },
          "FlowType": {
            "type": "string"
          },
          "InstanceType": {
            "type": "string"
          }
        }
      },
      "SampleQuery": {
        "type": "object",
        "properties": {
          "RHSValue": {
            "type": "string"
          },
          "Operator": {
            "type": "string"
          },
          "LHSField": {
            "type": "string"
          }
        }
      },
      "SampleFilterWithCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "filter": {
            "$ref": "#/components/schemas/SampleQuery"
          }
        }
      },
      "FilterFlowName": {
        "type": "object",
        "properties": {
          "flow_name": {
            "$ref": "#/components/schemas/SampleFilterWithCount"
          }
        }
      },
      "DynamicDateFilter": {
        "type": "object",
        "properties": {
          "last_n_days": {
            "$ref": "#/components/schemas/SampleQuery"
          }
        }
      },
      "FilterFlowType": {
        "type": "object",
        "properties": {
          "flow_type": {
            "$ref": "#/components/schemas/FilterFlowName"
          },
          "date_filter": {
            "$ref": "#/components/schemas/DynamicDateFilter"
          }
        }
      },
      "FinalSearchResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "SearchRequestParams": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          }
        }
      },
      "MyCompletedCount": {
        "type": "object",
        "properties": {
          "Completed": {
            "type": "integer"
          }
        }
      },
      "GroupsInUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "DefaultUser": {
        "type": "object",
        "properties": {
          "Phone": {
            "type": "string"
          },
          "UserType": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "UserSystemType": {
            "type": "integer"
          },
          "ProfilePicture": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupsInUser"
            }
          }
        },
        "required": [
          "_id"
        ]
      },
      "AppConfigSchem": {
        "type": "object",
        "properties": {
          "ProfileBasePath": {
            "type": "string",
            "format": "url"
          },
          "UploadHost": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "CurrentUser": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "DelegationEndDate": {
            "type": "string",
            "format": "date"
          },
          "Kind": {
            "type": "string"
          },
          "AppConfig": {
            "$ref": "#/components/schemas/AppConfigSchem"
          },
          "Manager": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "Phone": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "DelegationStartDate": {
            "type": "string",
            "format": "date"
          },
          "LastName": {
            "type": "string"
          },
          "Accessibility": {
            "type": "string"
          },
          "Designation": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "UserType": {
            "type": "string"
          },
          "ProfilePicture": {
            "type": "string"
          },
          "TimeZone": {
            "type": "object"
          },
          "Signature": {
            "type": "string",
            "format": "url"
          },
          "UserSystemType": {
            "type": "integer"
          },
          "_id": {
            "type": "string"
          },
          "Language": {
            "type": "string"
          },
          "DelegatedTo": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_id"
        ]
      },
      "ManagerInUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "CreateUserParams": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "Email": {
            "type": "string",
            "format": "email"
          },
          "Manager": {
            "$ref": "#/components/schemas/ManagerInUser"
          },
          "LastName": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "Email"
        ]
      },
      "CreateUserResponse": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "DelegationEndDate": {
            "type": "string",
            "format": "date"
          },
          "Kind": {
            "type": "string"
          },
          "AppConfig": {
            "$ref": "#/components/schemas/AppConfigSchem"
          },
          "Manager": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "Phone": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "_created_by": {
            "$ref": "#/components/schemas/DefaultUser"
          },
          "DelegationStartDate": {
            "type": "string",
            "format": "date"
          },
          "LastName": {
            "type": "string"
          },
          "Accessibility": {
            "type": "string"
          },
          "Designation": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "UserType": {
            "type": "string"
          },
          "ProfilePicture": {
            "type": "string"
          },
          "TimeZone": {
            "type": "object"
          },
          "Signature": {
            "type": "string",
            "format": "url"
          },
          "UserSystemType": {
            "type": "integer"
          },
          "_id": {
            "type": "string"
          },
          "Language": {
            "type": "string"
          },
          "DelegatedTo": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "_modified_by": {
            "$ref": "#/components/schemas/DefaultUser"
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_id"
        ]
      },
      "BaseGroup": {
        "type": "object",
        "properties": {
          "UserCount": {
            "type": "integer"
          },
          "_id": {
            "type": "string"
          },
          "GroupCount": {
            "type": "integer"
          },
          "SyncFrom": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "DelegationEndDate": {
            "type": "string",
            "format": "date"
          },
          "Kind": {
            "type": "string"
          },
          "AppConfig": {
            "$ref": "#/components/schemas/AppConfigSchem"
          },
          "Manager": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "Phone": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "DelegationStartDate": {
            "type": "string",
            "format": "date"
          },
          "LastName": {
            "type": "string"
          },
          "Accessibility": {
            "type": "string"
          },
          "Designation": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "UserType": {
            "type": "string"
          },
          "ProfilePicture": {
            "type": "string"
          },
          "TimeZone": {
            "type": "object"
          },
          "Signature": {
            "type": "string",
            "format": "url"
          },
          "UserSystemType": {
            "type": "integer"
          },
          "_id": {
            "type": "string"
          },
          "Language": {
            "type": "string"
          },
          "DelegatedTo": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseGroup"
            }
          }
        },
        "required": [
          "_id"
        ]
      },
      "UserStatusCount": {
        "type": "object",
        "properties": {
          "Invited": {
            "type": "integer"
          },
          "Active": {
            "type": "integer"
          },
          "RequestedAccess": {
            "type": "integer"
          },
          "InActive": {
            "type": "integer"
          }
        }
      },
      "Assignee": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          },
          "ProfilePicture": {
            "type": "string",
            "format": "url"
          }
        },
        "required": [
          "Kind",
          "ProfilePicture",
          "_id"
        ]
      },
      "UserField": {
        "type": "object",
        "properties": {
          "Field_QueryDefinition": {
            "type": "string"
          },
          "BaseMetadata": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Label": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        },
        "required": [
          "Id",
          "Name"
        ]
      },
      "MembersDetails": {
        "type": "object",
        "properties": {
          "G": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseGroup"
            }
          },
          "U": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseUser"
            }
          }
        }
      },
      "GridColumns": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Label": {
            "type": "string"
          },
          "Required": {
            "type": "boolean"
          },
          "IsSystemField": {
            "type": "boolean"
          },
          "ReadOnly": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        },
        "required": [
          "Id",
          "Name"
        ]
      },
      "UserGridList": {
        "type": "object",
        "properties": {
          "Table_User": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultUser"
            }
          },
          "Columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridColumns"
            }
          },
          "_id": {
            "type": "string"
          },
          "Sort": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "Filter": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "Columns",
          "_id"
        ]
      },
      "GroupSchema": {
        "type": "object",
        "properties": {
          "UserCount": {
            "type": "integer"
          },
          "_id": {
            "type": "string"
          },
          "GroupCount": {
            "type": "integer"
          },
          "GroupMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultUser"
            }
          },
          "SyncFrom": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "Identity": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "IsDelete": {
            "type": "boolean"
          },
          "Kind": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "CreateGroup": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identity"
            }
          },
          "Email": {
            "type": "string",
            "format": "email"
          },
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identity"
            }
          }
        },
        "required": [
          "Name"
        ]
      },
      "UserSort": {
        "type": "object",
        "properties": {
          "SortType": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        },
        "required": [
          "Id",
          "SortType"
        ]
      },
      "GetMembersRequest": {
        "type": "object",
        "properties": {
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSort"
            }
          },
          "Fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "Ids"
        ]
      },
      "ApiKeysSchema": {
        "type": "object",
        "properties": {
          "IsInActive": {
            "type": "boolean"
          },
          "_id": {
            "type": "string"
          },
          "User": {
            "$ref": "#/components/schemas/Base"
          },
          "Name": {
            "type": "string"
          },
          "_created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "_id"
        ]
      },
      "BaseSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "UserSetting": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "TimeZone": {
            "type": "object",
            "nullable": true
          },
          "DelegationEndDate": {
            "type": "string",
            "format": "date"
          },
          "DelegationStartDate": {
            "type": "string",
            "format": "date"
          },
          "Language": {
            "type": "object",
            "nullable": true
          },
          "Kind": {
            "type": "string"
          },
          "DelegatedTo": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "Accessibility": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "JoinUserParams": {
        "type": "object",
        "properties": {
          "LastName": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "Email": {
            "type": "string",
            "format": "email"
          },
          "FirstName": {
            "type": "string"
          }
        },
        "required": [
          "Email",
          "FirstName"
        ]
      },
      "RoleRequestSchema": {
        "type": "object",
        "properties": {
          "UserCount": {
            "type": "integer"
          },
          "ApplicationId": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "GroupCount": {
            "type": "integer"
          },
          "Preference": {
            "$ref": "#/components/schemas/BaseSchema"
          },
          "Kind": {
            "type": "string"
          },
          "SyncFrom": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "RoleSchema": {
        "type": "object",
        "properties": {
          "UserCount": {
            "type": "integer"
          },
          "_id": {
            "type": "string"
          },
          "GroupCount": {
            "type": "integer"
          },
          "GroupMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultUser"
            }
          },
          "Kind": {
            "type": "string"
          },
          "SyncFrom": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "BatchResendResponseSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "UnverifiedUsersCount": {
            "type": "integer"
          }
        },
        "required": [
          "UnverifiedUsersCount",
          "status"
        ]
      },
      "ResetPasswordResponseSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "PasswordResetUserCount": {
            "type": "integer"
          }
        },
        "required": [
          "PasswordResetUserCount",
          "status"
        ]
      },
      "BatchUserResendSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "ResendVerificationSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "Field": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "KissflowTFAStatus": {
        "type": "object",
        "properties": {
          "IsEnabled": {
            "type": "boolean"
          },
          "Primary": {
            "type": "string"
          }
        }
      },
      "KissflowLoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "TFAConfig": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "TFAStatus": {
            "$ref": "#/components/schemas/KissflowTFAStatus"
          }
        }
      },
      "KissflowLogin": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          }
        },
        "required": [
          "Email",
          "Password"
        ]
      },
      "SignatureField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "UpdateUserProfileSettings": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "DelegationEndDate": {
            "type": "string",
            "format": "date"
          },
          "Kind": {
            "type": "string"
          },
          "Manager": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUser"
              }
            ]
          },
          "Name": {
            "type": "string"
          },
          "DelegationStartDate": {
            "type": "string",
            "format": "date"
          },
          "Accessibility": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Designation": {
            "type": "string"
          },
          "DateFormat": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "ProfilePicture": {
            "type": "object"
          },
          "TimeZone": {
            "type": "object",
            "nullable": true
          },
          "Signature": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SignatureField"
              }
            ]
          },
          "_id": {
            "type": "string"
          },
          "Language": {
            "type": "object",
            "nullable": true
          },
          "DelegatedTo": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "AboutMe": {
            "type": "string"
          }
        }
      },
      "UpdatePassword": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "OldPassword": {
            "type": "string"
          }
        },
        "required": [
          "OldPassword",
          "Password"
        ]
      },
      "ConfigJsonSchema": {
        "type": "object",
        "properties": {
          "Filter": {
            "type": "object"
          },
          "SortType": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "Filter"
        ]
      },
      "BulkPayloadSchema": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "object"
          },
          "Filter": {
            "type": "object"
          },
          "SortType": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "Data",
          "Filter"
        ]
      },
      "ProactiveResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string"
          },
          "Failures": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "ReasonCode": {
            "type": "string"
          },
          "Count": {
            "type": "integer"
          }
        },
        "required": [
          "Count",
          "ReasonCode",
          "Status"
        ]
      },
      "BulkActionResponse": {
        "type": "object",
        "properties": {
          "action_id": {
            "type": "string"
          }
        },
        "required": [
          "action_id"
        ]
      },
      "BatchUpdateUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "ServiceAccountCreateUserParams": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "ProfilePicture": {
            "type": "object"
          }
        }
      },
      "ServiceAccountShareUser": {
        "type": "object",
        "properties": {
          "Permission": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Admin"
              ]
            }
          },
          "_id": {
            "type": "string"
          },
          "Kind": {
            "type": "string"
          },
          "Role": {
            "type": "string",
            "enum": [
              "Admin"
            ]
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ServiceAccountUpdateUserParams": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "ProfilePicture": {
            "type": "object"
          }
        }
      },
      "ServiceAccountList": {
        "type": "object",
        "properties": {
          "Fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "Ids"
        ]
      }
    },
    "securitySchemes": {
      "X-Api-Key": {
        "type": "apiKey",
        "name": "X-Api-Key",
        "in": "header"
      },
      "X-Access-Key-Id": {
        "type": "apiKey",
        "name": "X-Access-Key-Id",
        "in": "header"
      },
      "X-Access-Key-Secret": {
        "type": "apiKey",
        "name": "X-Access-Key-Secret",
        "in": "header"
      }
    }
  },
  "info": {
    "title": "Kissflow API",
    "version": "4.0.0"
  },
  "openapi": "3.0.0"
}
